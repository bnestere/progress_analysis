// Generated by llvm2cpp - DO NOT MODIFY!


Function* makeLLVMFunction(Module *mod) {

// Type Definitions
std::vector<Type*>FuncTy_0_args;
FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 64));
FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
FunctionType* FuncTy_0 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_0_args,
 /*isVarArg=*/false);

PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);

PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
if (!StructTy_struct_timespec) {
StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
}
std::vector<Type*>StructTy_struct_timespec_fields;
StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
if (StructTy_struct_timespec->isOpaque()) {
StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
}

PointerType* PointerTy_3 = PointerType::get(StructTy_struct_timespec, 0);

PointerType* PointerTy_4 = PointerType::get(PointerTy_3, 0);

PointerType* PointerTy_5 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);

std::vector<Type*>FuncTy_7_args;
FuncTy_7_args.push_back(IntegerType::get(mod->getContext(), 64));
FunctionType* FuncTy_7 = FunctionType::get(
 /*Result=*/IntegerType::get(mod->getContext(), 64),
 /*Params=*/FuncTy_7_args,
 /*isVarArg=*/true);

PointerType* PointerTy_6 = PointerType::get(FuncTy_7, 0);

ArrayType* ArrayTy_9 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 128);

PointerType* PointerTy_8 = PointerType::get(ArrayTy_9, 0);

ArrayType* ArrayTy_11 = ArrayType::get(ArrayTy_9, 1024);

PointerType* PointerTy_10 = PointerType::get(ArrayTy_11, 0);

PointerType* PointerTy_12 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

ArrayType* ArrayTy_14 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 39);

PointerType* PointerTy_13 = PointerType::get(ArrayTy_14, 0);

std::vector<Type*>FuncTy_16_args;
FuncTy_16_args.push_back(PointerTy_12);
FunctionType* FuncTy_16 = FunctionType::get(
 /*Result=*/IntegerType::get(mod->getContext(), 32),
 /*Params=*/FuncTy_16_args,
 /*isVarArg=*/true);

PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);

ArrayType* ArrayTy_18 = ArrayType::get(StructTy_struct_timespec, 128);

PointerType* PointerTy_17 = PointerType::get(ArrayTy_18, 0);

ArrayType* ArrayTy_20 = ArrayType::get(ArrayTy_18, 1024);

PointerType* PointerTy_19 = PointerType::get(ArrayTy_20, 0);

std::vector<Type*>FuncTy_22_args;
FuncTy_22_args.push_back(IntegerType::get(mod->getContext(), 32));
FuncTy_22_args.push_back(PointerTy_3);
FunctionType* FuncTy_22 = FunctionType::get(
 /*Result=*/IntegerType::get(mod->getContext(), 32),
 /*Params=*/FuncTy_22_args,
 /*isVarArg=*/false);

PointerType* PointerTy_21 = PointerType::get(FuncTy_22, 0);

ArrayType* ArrayTy_24 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 49);

PointerType* PointerTy_23 = PointerType::get(ArrayTy_24, 0);

ArrayType* ArrayTy_26 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 24);

PointerType* PointerTy_25 = PointerType::get(ArrayTy_26, 0);

std::vector<Type*>FuncTy_28_args;
FuncTy_28_args.push_back(PointerTy_12);
FunctionType* FuncTy_28 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_28_args,
 /*isVarArg=*/false);

PointerType* PointerTy_27 = PointerType::get(FuncTy_28, 0);

std::vector<Type*>FuncTy_30_args;
FuncTy_30_args.push_back(IntegerType::get(mod->getContext(), 32));
FunctionType* FuncTy_30 = FunctionType::get(
 /*Result=*/Type::getVoidTy(mod->getContext()),
 /*Params=*/FuncTy_30_args,
 /*isVarArg=*/false);

PointerType* PointerTy_29 = PointerType::get(FuncTy_30, 0);


// Function Declarations

Function* func_syscall = mod->getFunction("syscall");
if (!func_syscall) {
func_syscall = Function::Create(
 /*Type=*/FuncTy_7,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"syscall", mod); // (external, no body)
func_syscall->setCallingConv(CallingConv::C);
}
AttributeSet func_syscall_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_syscall_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_syscall->setAttributes(func_syscall_PAL);

Function* func_printf = mod->getFunction("printf");
if (!func_printf) {
func_printf = Function::Create(
 /*Type=*/FuncTy_16,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"printf", mod); // (external, no body)
func_printf->setCallingConv(CallingConv::C);
}
AttributeSet func_printf_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_printf->setAttributes(func_printf_PAL);

Function* func_clock_gettime = mod->getFunction("clock_gettime");
if (!func_clock_gettime) {
func_clock_gettime = Function::Create(
 /*Type=*/FuncTy_22,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"clock_gettime", mod); // (external, no body)
func_clock_gettime->setCallingConv(CallingConv::C);
}
AttributeSet func_clock_gettime_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_clock_gettime_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_clock_gettime->setAttributes(func_clock_gettime_PAL);

Function* func_perror = mod->getFunction("perror");
if (!func_perror) {
func_perror = Function::Create(
 /*Type=*/FuncTy_28,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"perror", mod); // (external, no body)
func_perror->setCallingConv(CallingConv::C);
}
AttributeSet func_perror_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_perror_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_perror->setAttributes(func_perror_PAL);

Function* func_exit = mod->getFunction("exit");
if (!func_exit) {
func_exit = Function::Create(
 /*Type=*/FuncTy_30,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"exit", mod); // (external, no body)
func_exit->setCallingConv(CallingConv::C);
}
AttributeSet func_exit_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_exit_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_exit->setAttributes(func_exit_PAL);

// Global Variable Declarations

GlobalVariable* gvar_array_active_pps = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_11,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"active_pps");

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_14,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

GlobalVariable* gvar_array_trust_pp_nos = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_9,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"trust_pp_nos");

GlobalVariable* gvar_array_duration_check_pp_nos = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_20,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"duration_check_pp_nos");

GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_24,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str1");
gvar_array__str1->setAlignment(1);

GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_26,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str2");
gvar_array__str2->setAlignment(1);

// Constant Definitions
ConstantInt* const_int32_31 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int64_32 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("186"), 10));
ConstantInt* const_int64_33 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1023"), 10));
ConstantInt* const_int64_34 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int32_35 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
std::vector<Constant*> const_ptr_36_indices;
const_ptr_36_indices.push_back(const_int32_35);
const_ptr_36_indices.push_back(const_int32_35);
Constant* const_ptr_36 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_36_indices);
ConstantFP* const_double_37 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-09));
ConstantFP* const_double_38 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-01));
ConstantInt* const_int64_39 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-1"), 10));
std::vector<Constant*> const_ptr_40_indices;
const_ptr_40_indices.push_back(const_int32_35);
const_ptr_40_indices.push_back(const_int32_35);
Constant* const_ptr_40 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_40_indices);
ConstantInt* const_int64_41 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
std::vector<Constant*> const_ptr_42_indices;
const_ptr_42_indices.push_back(const_int32_35);
const_ptr_42_indices.push_back(const_int32_35);
Constant* const_ptr_42 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_42_indices);

Function* func_pp_end = mod->getFunction("pp_end");
if (!func_pp_end) {
func_pp_end = Function::Create(
 /*Type=*/FuncTy_0,
 /*Linkage=*/GlobalValue::InternalLinkage,
 /*Name=*/"pp_end", mod); 
func_pp_end->setCallingConv(CallingConv::C);
}
AttributeSet func_pp_end_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_pp_end_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_pp_end->setAttributes(func_pp_end_PAL);
Function::arg_iterator args = func_pp_end->arg_begin();
Value* int64_pp_id = args++;
int64_pp_id->setName("pp_id");
Value* int32_pp_no = args++;
int32_pp_no->setName("pp_no");

BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_pp_end,0);
BasicBlock* label_land_lhs_true = BasicBlock::Create(mod->getContext(), "land.lhs.true",func_pp_end,0);
BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_pp_end,0);
BasicBlock* label_if_then15 = BasicBlock::Create(mod->getContext(), "if.then15",func_pp_end,0);
BasicBlock* label_if_then31 = BasicBlock::Create(mod->getContext(), "if.then31",func_pp_end,0);
BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func_pp_end,0);
BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_pp_end,0);
BasicBlock* label_if_end37 = BasicBlock::Create(mod->getContext(), "if.end37",func_pp_end,0);
BasicBlock* label_if_then38 = BasicBlock::Create(mod->getContext(), "if.then38",func_pp_end,0);
BasicBlock* label_if_end39 = BasicBlock::Create(mod->getContext(), "if.end39",func_pp_end,0);
BasicBlock* label_if_end44 = BasicBlock::Create(mod->getContext(), "if.end44",func_pp_end,0);

// Block entry (label_entry)
AllocaInst* ptr_pp_id_addr = new AllocaInst(IntegerType::get(mod->getContext(), 64), "pp_id.addr", label_entry);
ptr_pp_id_addr->setAlignment(8);
AllocaInst* ptr_pp_no_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "pp_no.addr", label_entry);
ptr_pp_no_addr->setAlignment(4);
AllocaInst* ptr_tid = new AllocaInst(IntegerType::get(mod->getContext(), 32), "tid", label_entry);
ptr_tid->setAlignment(4);
AllocaInst* ptr_tend = new AllocaInst(StructTy_struct_timespec, "tend", label_entry);
ptr_tend->setAlignment(8);
AllocaInst* ptr_tstart = new AllocaInst(PointerTy_3, "tstart", label_entry);
ptr_tstart->setAlignment(8);
AllocaInst* ptr_diff = new AllocaInst(Type::getDoubleTy(mod->getContext()), "diff", label_entry);
ptr_diff->setAlignment(8);
AllocaInst* ptr_ret = new AllocaInst(IntegerType::get(mod->getContext(), 64), "ret", label_entry);
ptr_ret->setAlignment(8);
StoreInst* void_43 = new StoreInst(int64_pp_id, ptr_pp_id_addr, false, label_entry);
void_43->setAlignment(8);
StoreInst* void_44 = new StoreInst(int32_pp_no, ptr_pp_no_addr, false, label_entry);
void_44->setAlignment(4);
CallInst* int64_call = CallInst::Create(func_syscall, const_int64_32, "call", label_entry);
int64_call->setCallingConv(CallingConv::C);
int64_call->setTailCall(false);
AttributeSet int64_call_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int64_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int64_call->setAttributes(int64_call_PAL);

BinaryOperator* int64_and = BinaryOperator::Create(Instruction::And, int64_call, const_int64_33, "and", label_entry);
CastInst* int32_conv = new TruncInst(int64_and, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
StoreInst* void_45 = new StoreInst(int32_conv, ptr_tid, false, label_entry);
void_45->setAlignment(4);
LoadInst* int64_46 = new LoadInst(ptr_pp_id_addr, "", false, label_entry);
int64_46->setAlignment(8);
ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_SGT, int64_46, const_int64_34, "cmp");
BranchInst::Create(label_land_lhs_true, label_if_end44, int1_cmp, label_entry);

// Block land.lhs.true (label_land_lhs_true)
LoadInst* int32_48 = new LoadInst(ptr_pp_no_addr, "", false, label_land_lhs_true);
int32_48->setAlignment(4);
CastInst* int64_idxprom = new SExtInst(int32_48, IntegerType::get(mod->getContext(), 64), "idxprom", label_land_lhs_true);
LoadInst* int32_49 = new LoadInst(ptr_tid, "", false, label_land_lhs_true);
int32_49->setAlignment(4);
CastInst* int64_idxprom2 = new SExtInst(int32_49, IntegerType::get(mod->getContext(), 64), "idxprom2", label_land_lhs_true);
std::vector<Value*> ptr_arrayidx_indices;
ptr_arrayidx_indices.push_back(const_int32_35);
ptr_arrayidx_indices.push_back(int64_idxprom2);
Instruction* ptr_arrayidx = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx_indices, "arrayidx", label_land_lhs_true);
std::vector<Value*> ptr_arrayidx3_indices;
ptr_arrayidx3_indices.push_back(const_int32_35);
ptr_arrayidx3_indices.push_back(int64_idxprom);
Instruction* ptr_arrayidx3 = GetElementPtrInst::Create(ptr_arrayidx, ptr_arrayidx3_indices, "arrayidx3", label_land_lhs_true);
LoadInst* int64_50 = new LoadInst(ptr_arrayidx3, "", false, label_land_lhs_true);
int64_50->setAlignment(8);
LoadInst* int64_51 = new LoadInst(ptr_pp_id_addr, "", false, label_land_lhs_true);
int64_51->setAlignment(8);
ICmpInst* int1_cmp4 = new ICmpInst(*label_land_lhs_true, ICmpInst::ICMP_EQ, int64_50, int64_51, "cmp4");
BranchInst::Create(label_if_then, label_if_end44, int1_cmp4, label_land_lhs_true);

// Block if.then (label_if_then)
LoadInst* int32_53 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
int32_53->setAlignment(4);
LoadInst* int64_54 = new LoadInst(ptr_pp_id_addr, "", false, label_if_then);
int64_54->setAlignment(8);
LoadInst* int32_55 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
int32_55->setAlignment(4);
CastInst* int64_idxprom6 = new SExtInst(int32_55, IntegerType::get(mod->getContext(), 64), "idxprom6", label_if_then);
LoadInst* int32_56 = new LoadInst(ptr_tid, "", false, label_if_then);
int32_56->setAlignment(4);
CastInst* int64_idxprom7 = new SExtInst(int32_56, IntegerType::get(mod->getContext(), 64), "idxprom7", label_if_then);
std::vector<Value*> ptr_arrayidx8_indices;
ptr_arrayidx8_indices.push_back(const_int32_35);
ptr_arrayidx8_indices.push_back(int64_idxprom7);
Instruction* ptr_arrayidx8 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx8_indices, "arrayidx8", label_if_then);
std::vector<Value*> ptr_arrayidx9_indices;
ptr_arrayidx9_indices.push_back(const_int32_35);
ptr_arrayidx9_indices.push_back(int64_idxprom6);
Instruction* ptr_arrayidx9 = GetElementPtrInst::Create(ptr_arrayidx8, ptr_arrayidx9_indices, "arrayidx9", label_if_then);
LoadInst* int64_57 = new LoadInst(ptr_arrayidx9, "", false, label_if_then);
int64_57->setAlignment(8);
std::vector<Value*> int32_call10_params;
int32_call10_params.push_back(const_ptr_36);
int32_call10_params.push_back(int32_53);
int32_call10_params.push_back(int64_54);
int32_call10_params.push_back(int64_57);
CallInst* int32_call10 = CallInst::Create(func_printf, int32_call10_params, "call10", label_if_then);
int32_call10->setCallingConv(CallingConv::C);
int32_call10->setTailCall(false);
AttributeSet int32_call10_PAL;
int32_call10->setAttributes(int32_call10_PAL);

LoadInst* int32_58 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
int32_58->setAlignment(4);
CastInst* int64_idxprom11 = new SExtInst(int32_58, IntegerType::get(mod->getContext(), 64), "idxprom11", label_if_then);
std::vector<Value*> ptr_arrayidx12_indices;
ptr_arrayidx12_indices.push_back(const_int32_35);
ptr_arrayidx12_indices.push_back(int64_idxprom11);
Instruction* ptr_arrayidx12 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx12_indices, "arrayidx12", label_if_then);
LoadInst* int64_59 = new LoadInst(ptr_arrayidx12, "", false, label_if_then);
int64_59->setAlignment(8);
ICmpInst* int1_cmp13 = new ICmpInst(*label_if_then, ICmpInst::ICMP_EQ, int64_59, const_int64_34, "cmp13");
BranchInst::Create(label_if_then15, label_if_end37, int1_cmp13, label_if_then);

// Block if.then15 (label_if_then15)
LoadInst* int32_61 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then15);
int32_61->setAlignment(4);
CastInst* int64_idxprom16 = new SExtInst(int32_61, IntegerType::get(mod->getContext(), 64), "idxprom16", label_if_then15);
LoadInst* int32_62 = new LoadInst(ptr_tid, "", false, label_if_then15);
int32_62->setAlignment(4);
CastInst* int64_idxprom17 = new SExtInst(int32_62, IntegerType::get(mod->getContext(), 64), "idxprom17", label_if_then15);
std::vector<Value*> ptr_arrayidx18_indices;
ptr_arrayidx18_indices.push_back(const_int32_35);
ptr_arrayidx18_indices.push_back(int64_idxprom17);
Instruction* ptr_arrayidx18 = GetElementPtrInst::Create(gvar_array_duration_check_pp_nos, ptr_arrayidx18_indices, "arrayidx18", label_if_then15);
std::vector<Value*> ptr_arrayidx19_indices;
ptr_arrayidx19_indices.push_back(const_int32_35);
ptr_arrayidx19_indices.push_back(int64_idxprom16);
Instruction* ptr_arrayidx19 = GetElementPtrInst::Create(ptr_arrayidx18, ptr_arrayidx19_indices, "arrayidx19", label_if_then15);
StoreInst* void_63 = new StoreInst(ptr_arrayidx19, ptr_tstart, false, label_if_then15);
void_63->setAlignment(8);
std::vector<Value*> int32_call20_params;
int32_call20_params.push_back(const_int32_35);
int32_call20_params.push_back(ptr_tend);
CallInst* int32_call20 = CallInst::Create(func_clock_gettime, int32_call20_params, "call20", label_if_then15);
int32_call20->setCallingConv(CallingConv::C);
int32_call20->setTailCall(false);
AttributeSet int32_call20_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call20_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call20->setAttributes(int32_call20_PAL);

std::vector<Value*> ptr_tv_sec_indices;
ptr_tv_sec_indices.push_back(const_int32_35);
ptr_tv_sec_indices.push_back(const_int32_35);
Instruction* ptr_tv_sec = GetElementPtrInst::Create(ptr_tend, ptr_tv_sec_indices, "tv_sec", label_if_then15);
LoadInst* int64_64 = new LoadInst(ptr_tv_sec, "", false, label_if_then15);
int64_64->setAlignment(8);
CastInst* double_conv21 = new SIToFPInst(int64_64, Type::getDoubleTy(mod->getContext()), "conv21", label_if_then15);
std::vector<Value*> ptr_tv_nsec_indices;
ptr_tv_nsec_indices.push_back(const_int32_35);
ptr_tv_nsec_indices.push_back(const_int32_31);
Instruction* ptr_tv_nsec = GetElementPtrInst::Create(ptr_tend, ptr_tv_nsec_indices, "tv_nsec", label_if_then15);
LoadInst* int64_65 = new LoadInst(ptr_tv_nsec, "", false, label_if_then15);
int64_65->setAlignment(8);
CastInst* double_conv22 = new SIToFPInst(int64_65, Type::getDoubleTy(mod->getContext()), "conv22", label_if_then15);
BinaryOperator* double_mul = BinaryOperator::Create(Instruction::FMul, const_double_37, double_conv22, "mul", label_if_then15);
BinaryOperator* double_add = BinaryOperator::Create(Instruction::FAdd, double_conv21, double_mul, "add", label_if_then15);
LoadInst* ptr_66 = new LoadInst(ptr_tstart, "", false, label_if_then15);
ptr_66->setAlignment(8);
std::vector<Value*> ptr_tv_sec23_indices;
ptr_tv_sec23_indices.push_back(const_int32_35);
ptr_tv_sec23_indices.push_back(const_int32_35);
Instruction* ptr_tv_sec23 = GetElementPtrInst::Create(ptr_66, ptr_tv_sec23_indices, "tv_sec23", label_if_then15);
LoadInst* int64_67 = new LoadInst(ptr_tv_sec23, "", false, label_if_then15);
int64_67->setAlignment(8);
CastInst* double_conv24 = new SIToFPInst(int64_67, Type::getDoubleTy(mod->getContext()), "conv24", label_if_then15);
LoadInst* ptr_68 = new LoadInst(ptr_tstart, "", false, label_if_then15);
ptr_68->setAlignment(8);
std::vector<Value*> ptr_tv_nsec25_indices;
ptr_tv_nsec25_indices.push_back(const_int32_35);
ptr_tv_nsec25_indices.push_back(const_int32_31);
Instruction* ptr_tv_nsec25 = GetElementPtrInst::Create(ptr_68, ptr_tv_nsec25_indices, "tv_nsec25", label_if_then15);
LoadInst* int64_69 = new LoadInst(ptr_tv_nsec25, "", false, label_if_then15);
int64_69->setAlignment(8);
CastInst* double_conv26 = new SIToFPInst(int64_69, Type::getDoubleTy(mod->getContext()), "conv26", label_if_then15);
BinaryOperator* double_mul27 = BinaryOperator::Create(Instruction::FMul, const_double_37, double_conv26, "mul27", label_if_then15);
BinaryOperator* double_add28 = BinaryOperator::Create(Instruction::FAdd, double_conv24, double_mul27, "add28", label_if_then15);
BinaryOperator* double_sub = BinaryOperator::Create(Instruction::FSub, double_add, double_add28, "sub", label_if_then15);
StoreInst* void_70 = new StoreInst(double_sub, ptr_diff, false, label_if_then15);
void_70->setAlignment(8);
LoadInst* double_71 = new LoadInst(ptr_diff, "", false, label_if_then15);
double_71->setAlignment(8);
FCmpInst* int1_cmp29 = new FCmpInst(*label_if_then15, FCmpInst::FCMP_OLT, double_71, const_double_38, "cmp29");
BranchInst::Create(label_if_then31, label_if_else, int1_cmp29, label_if_then15);

// Block if.then31 (label_if_then31)
LoadInst* int32_73 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then31);
int32_73->setAlignment(4);
CastInst* int64_idxprom32 = new SExtInst(int32_73, IntegerType::get(mod->getContext(), 64), "idxprom32", label_if_then31);
std::vector<Value*> ptr_arrayidx33_indices;
ptr_arrayidx33_indices.push_back(const_int32_35);
ptr_arrayidx33_indices.push_back(int64_idxprom32);
Instruction* ptr_arrayidx33 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx33_indices, "arrayidx33", label_if_then31);
StoreInst* void_74 = new StoreInst(const_int64_39, ptr_arrayidx33, false, label_if_then31);
void_74->setAlignment(8);
LoadInst* int32_75 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then31);
int32_75->setAlignment(4);
LoadInst* double_76 = new LoadInst(ptr_diff, "", false, label_if_then31);
double_76->setAlignment(8);
std::vector<Value*> int32_call34_params;
int32_call34_params.push_back(const_ptr_40);
int32_call34_params.push_back(int32_75);
int32_call34_params.push_back(double_76);
CallInst* int32_call34 = CallInst::Create(func_printf, int32_call34_params, "call34", label_if_then31);
int32_call34->setCallingConv(CallingConv::C);
int32_call34->setTailCall(false);
AttributeSet int32_call34_PAL;
int32_call34->setAttributes(int32_call34_PAL);

BranchInst::Create(label_if_end, label_if_then31);

// Block if.else (label_if_else)
LoadInst* int32_78 = new LoadInst(ptr_pp_no_addr, "", false, label_if_else);
int32_78->setAlignment(4);
CastInst* int64_idxprom35 = new SExtInst(int32_78, IntegerType::get(mod->getContext(), 64), "idxprom35", label_if_else);
std::vector<Value*> ptr_arrayidx36_indices;
ptr_arrayidx36_indices.push_back(const_int32_35);
ptr_arrayidx36_indices.push_back(int64_idxprom35);
Instruction* ptr_arrayidx36 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx36_indices, "arrayidx36", label_if_else);
StoreInst* void_79 = new StoreInst(const_int64_41, ptr_arrayidx36, false, label_if_else);
void_79->setAlignment(8);
BranchInst::Create(label_if_end, label_if_else);

// Block if.end (label_if_end)
BranchInst::Create(label_if_end37, label_if_end);

// Block if.end37 (label_if_end37)
StoreInst* void_82 = new StoreInst(const_int64_34, ptr_ret, false, label_if_end37);
void_82->setAlignment(8);
LoadInst* int64_83 = new LoadInst(ptr_ret, "", false, label_if_end37);
int64_83->setAlignment(8);
ICmpInst* int1_tobool = new ICmpInst(*label_if_end37, ICmpInst::ICMP_NE, int64_83, const_int64_34, "tobool");
BranchInst::Create(label_if_then38, label_if_end39, int1_tobool, label_if_end37);

// Block if.then38 (label_if_then38)
CallInst* void_85 = CallInst::Create(func_perror, const_ptr_42, "", label_if_then38);
void_85->setCallingConv(CallingConv::C);
void_85->setTailCall(false);
AttributeSet void_85_PAL;
void_85->setAttributes(void_85_PAL);

CallInst* void_86 = CallInst::Create(func_exit, const_int32_31, "", label_if_then38);
void_86->setCallingConv(CallingConv::C);
void_86->setTailCall(false);
AttributeSet void_86_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_86_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_86->setAttributes(void_86_PAL);

new UnreachableInst(mod->getContext(), label_if_then38);

// Block if.end39 (label_if_end39)
LoadInst* int32_88 = new LoadInst(ptr_pp_no_addr, "", false, label_if_end39);
int32_88->setAlignment(4);
CastInst* int64_idxprom40 = new SExtInst(int32_88, IntegerType::get(mod->getContext(), 64), "idxprom40", label_if_end39);
LoadInst* int32_89 = new LoadInst(ptr_tid, "", false, label_if_end39);
int32_89->setAlignment(4);
CastInst* int64_idxprom41 = new SExtInst(int32_89, IntegerType::get(mod->getContext(), 64), "idxprom41", label_if_end39);
std::vector<Value*> ptr_arrayidx42_indices;
ptr_arrayidx42_indices.push_back(const_int32_35);
ptr_arrayidx42_indices.push_back(int64_idxprom41);
Instruction* ptr_arrayidx42 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx42_indices, "arrayidx42", label_if_end39);
std::vector<Value*> ptr_arrayidx43_indices;
ptr_arrayidx43_indices.push_back(const_int32_35);
ptr_arrayidx43_indices.push_back(int64_idxprom40);
Instruction* ptr_arrayidx43 = GetElementPtrInst::Create(ptr_arrayidx42, ptr_arrayidx43_indices, "arrayidx43", label_if_end39);
StoreInst* void_90 = new StoreInst(const_int64_34, ptr_arrayidx43, false, label_if_end39);
void_90->setAlignment(8);
BranchInst::Create(label_if_end44, label_if_end39);

// Block if.end44 (label_if_end44)
ReturnInst::Create(mod->getContext(), label_if_end44);
return func_pp_end;
}
