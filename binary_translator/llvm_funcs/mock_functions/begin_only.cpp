// Generated by llvm2cpp - DO NOT MODIFY!
#include <type_traits>

#include "llvm/Pass.h"
#include "llvm/PassManager.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/APInt.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/GlobalVariable.h"
#include "llvm/IR/IRPrintingPasses.h"
#include "llvm/IR/InlineAsm.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/CFG.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/SourceMgr.h"

using namespace llvm;

Function* define_pp_begin(Module *mod, GlobalVariable* gvar_array_active_pps, GlobalVariable* gvar_array_trust_pp_nos, GlobalVariable* gvar_array_duration_check_pp_nos) {

  // Type Definitions
  std::vector<Type*>FuncTy_0_args;
  StructType *StructTy_struct__pp_user_t = mod->getTypeByName("struct._pp_user_t");
  if (!StructTy_struct__pp_user_t) {
    StructTy_struct__pp_user_t = StructType::create(mod->getContext(), "struct._pp_user_t");
  }
  std::vector<Type*>StructTy_struct__pp_user_t_fields;
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  if (StructTy_struct__pp_user_t->isOpaque()) {
    StructTy_struct__pp_user_t->setBody(StructTy_struct__pp_user_t_fields, /*isPacked=*/false);
  }

  PointerType* PointerTy_1 = PointerType::get(StructTy_struct__pp_user_t, 0);

  FuncTy_0_args.push_back(PointerTy_1);
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_0 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_0_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);

  PointerType* PointerTy_3 = PointerType::get(PointerTy_1, 0);

  PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

  StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
  if (!StructTy_struct_timespec) {
    StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
  }
  std::vector<Type*>StructTy_struct_timespec_fields;
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  if (StructTy_struct_timespec->isOpaque()) {
    StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
  }

  PointerType* PointerTy_6 = PointerType::get(StructTy_struct_timespec, 0);

  PointerType* PointerTy_5 = PointerType::get(PointerTy_6, 0);

  std::vector<Type*>FuncTy_8_args;
  FuncTy_8_args.push_back(IntegerType::get(mod->getContext(), 64));
  FunctionType* FuncTy_8 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_8_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_7 = PointerType::get(FuncTy_8, 0);

  ArrayType* ArrayTy_10 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 128);

  PointerType* PointerTy_9 = PointerType::get(ArrayTy_10, 0);

  PointerType* PointerTy_11 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

  ArrayType* ArrayTy_13 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 36);

  PointerType* PointerTy_12 = PointerType::get(ArrayTy_13, 0);

  std::vector<Type*>FuncTy_15_args;
  FuncTy_15_args.push_back(PointerTy_11);
  FunctionType* FuncTy_15 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_15_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_14 = PointerType::get(FuncTy_15, 0);

  ArrayType* ArrayTy_17 = ArrayType::get(StructTy_struct_timespec, 128);

  PointerType* PointerTy_16 = PointerType::get(ArrayTy_17, 0);

  ArrayType* ArrayTy_19 = ArrayType::get(ArrayTy_17, 1024);

  PointerType* PointerTy_18 = PointerType::get(ArrayTy_19, 0);

  std::vector<Type*>FuncTy_21_args;
  FuncTy_21_args.push_back(IntegerType::get(mod->getContext(), 32));
  FuncTy_21_args.push_back(PointerTy_6);
  FunctionType* FuncTy_21 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_21_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_20 = PointerType::get(FuncTy_21, 0);

  ArrayType* ArrayTy_23 = ArrayType::get(ArrayTy_10, 1024);

  PointerType* PointerTy_22 = PointerType::get(ArrayTy_23, 0);

  ArrayType* ArrayTy_25 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 64);

  PointerType* PointerTy_24 = PointerType::get(ArrayTy_25, 0);


  // Function Declarations

  Function* func_syscall = mod->getFunction("syscall");
  if (!func_syscall) {
    func_syscall = Function::Create(
        /*Type=*/FuncTy_8,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"syscall", mod); // (external, no body)
    func_syscall->setCallingConv(CallingConv::C);
  }
  AttributeSet func_syscall_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_syscall_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_syscall->setAttributes(func_syscall_PAL);

  Function* func_printf = mod->getFunction("printf");
  if (!func_printf) {
    func_printf = Function::Create(
        /*Type=*/FuncTy_15,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"printf", mod); // (external, no body)
    func_printf->setCallingConv(CallingConv::C);
  }
  AttributeSet func_printf_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_printf->setAttributes(func_printf_PAL);

  Function* func_clock_gettime = mod->getFunction("clock_gettime");
  if (!func_clock_gettime) {
    func_clock_gettime = Function::Create(
        /*Type=*/FuncTy_21,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"clock_gettime", mod); // (external, no body)
    func_clock_gettime->setCallingConv(CallingConv::C);
  }
  AttributeSet func_clock_gettime_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_clock_gettime_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_clock_gettime->setAttributes(func_clock_gettime_PAL);

  // Global Variable Declarations

  GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_13,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str");
  gvar_array__str->setAlignment(1);


  GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_25,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str1");
  gvar_array__str1->setAlignment(1);

  // Constant Definitions
  ConstantInt* const_int32_26 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
  ConstantInt* const_int64_27 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("186"), 10));
  ConstantInt* const_int64_28 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1023"), 10));
  ConstantInt* const_int64_29 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-1"), 10));
  ConstantInt* const_int32_30 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
  ConstantInt* const_int64_31 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
  std::vector<Constant*> const_ptr_32_indices;
  const_ptr_32_indices.push_back(const_int32_30);
  const_ptr_32_indices.push_back(const_int32_30);
  Constant* const_ptr_32 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_32_indices);
  Constant *const_array_33 = ConstantDataArray::getString(mod->getContext(), "Testing the waters... pp %d tid %d\x0A", true);
  ConstantInt* const_int32_34 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
  std::vector<Constant*> const_ptr_35_indices;
  const_ptr_35_indices.push_back(const_int32_30);
  const_ptr_35_indices.push_back(const_int32_30);
  Constant* const_ptr_35 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_35_indices);
  Constant *const_array_36 = ConstantDataArray::getString(mod->getContext(), "Beginning progress period %d: tid %d wss %d, reuse %d, rsrc %d\x0A", true);

  // Global Variable Definitions
  gvar_array__str->setInitializer(const_array_33);
  gvar_array__str1->setInitializer(const_array_36);

  Function* func_pp_begin = mod->getFunction("pp_begin");
  if (!func_pp_begin) {
    func_pp_begin = Function::Create(
        /*Type=*/FuncTy_0,
        /*Linkage=*/GlobalValue::InternalLinkage,
        /*Name=*/"pp_begin", mod); 
    func_pp_begin->setCallingConv(CallingConv::C);
  }
  AttributeSet func_pp_begin_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      B.addAttribute(Attribute::UWTable);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_pp_begin_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_pp_begin->setAttributes(func_pp_begin_PAL);
  Function::arg_iterator args = func_pp_begin->arg_begin();
  Value* ptr_user_d = args++;
  ptr_user_d->setName("user_d");
  Value* int32_pp_no = args++;
  int32_pp_no->setName("pp_no");

  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_pp_begin,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_pp_begin,0);
  BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func_pp_begin,0);
  BasicBlock* label_if_then6 = BasicBlock::Create(mod->getContext(), "if.then6",func_pp_begin,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_pp_begin,0);
  BasicBlock* label_if_end14 = BasicBlock::Create(mod->getContext(), "if.end14",func_pp_begin,0);
  BasicBlock* label_if_then21 = BasicBlock::Create(mod->getContext(), "if.then21",func_pp_begin,0);
  BasicBlock* label_if_end29 = BasicBlock::Create(mod->getContext(), "if.end29",func_pp_begin,0);
  BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_pp_begin,0);

  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 64), "retval", label_entry);
  ptr_retval->setAlignment(8);
  AllocaInst* ptr_user_d_addr = new AllocaInst(PointerTy_1, "user_d.addr", label_entry);
  ptr_user_d_addr->setAlignment(8);
  AllocaInst* ptr_pp_no_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "pp_no.addr", label_entry);
  ptr_pp_no_addr->setAlignment(4);
  AllocaInst* ptr_tid = new AllocaInst(IntegerType::get(mod->getContext(), 32), "tid", label_entry);
  ptr_tid->setAlignment(4);
  AllocaInst* ptr_pp_id = new AllocaInst(IntegerType::get(mod->getContext(), 64), "pp_id", label_entry);
  ptr_pp_id->setAlignment(8);
  AllocaInst* ptr_spec = new AllocaInst(PointerTy_6, "spec", label_entry);
  ptr_spec->setAlignment(8);
  StoreInst* void_37 = new StoreInst(ptr_user_d, ptr_user_d_addr, false, label_entry);
  void_37->setAlignment(8);
  StoreInst* void_38 = new StoreInst(int32_pp_no, ptr_pp_no_addr, false, label_entry);
  void_38->setAlignment(4);
  CallInst* int64_call = CallInst::Create(func_syscall, const_int64_27, "call", label_entry);
  int64_call->setCallingConv(CallingConv::C);
  int64_call->setTailCall(false);
  AttributeSet int64_call_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call->setAttributes(int64_call_PAL);

  BinaryOperator* int64_and = BinaryOperator::Create(Instruction::And, int64_call, const_int64_28, "and", label_entry);
  CastInst* int32_conv = new TruncInst(int64_and, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
  StoreInst* void_39 = new StoreInst(int32_conv, ptr_tid, false, label_entry);
  void_39->setAlignment(4);
  StoreInst* void_40 = new StoreInst(const_int64_29, ptr_pp_id, false, label_entry);
  void_40->setAlignment(8);
  LoadInst* int32_41 = new LoadInst(ptr_pp_no_addr, "", false, label_entry);
  int32_41->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_41, IntegerType::get(mod->getContext(), 64), "idxprom", label_entry);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_30);
  ptr_arrayidx_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx_indices, "arrayidx", label_entry);
  LoadInst* int64_42 = new LoadInst(ptr_arrayidx, "", false, label_entry);
  int64_42->setAlignment(8);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_EQ, int64_42, const_int64_29, "cmp");
  BranchInst::Create(label_if_then, label_if_else, int1_cmp, label_entry);

  // Block if.then (label_if_then)
  StoreInst* void_44 = new StoreInst(const_int64_29, ptr_retval, false, label_if_then);
  BranchInst::Create(label_return, label_if_then);

  // Block if.else (label_if_else)
  LoadInst* int32_46 = new LoadInst(ptr_pp_no_addr, "", false, label_if_else);
  int32_46->setAlignment(4);
  CastInst* int64_idxprom2 = new SExtInst(int32_46, IntegerType::get(mod->getContext(), 64), "idxprom2", label_if_else);
  std::vector<Value*> ptr_arrayidx3_indices;
  ptr_arrayidx3_indices.push_back(const_int32_30);
  ptr_arrayidx3_indices.push_back(int64_idxprom2);
  Instruction* ptr_arrayidx3 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx3_indices, "arrayidx3", label_if_else);
  LoadInst* int64_47 = new LoadInst(ptr_arrayidx3, "", false, label_if_else);
  int64_47->setAlignment(8);
  ICmpInst* int1_cmp4 = new ICmpInst(*label_if_else, ICmpInst::ICMP_EQ, int64_47, const_int64_31, "cmp4");
  BranchInst::Create(label_if_then6, label_if_end, int1_cmp4, label_if_else);

  // Block if.then6 (label_if_then6)
  LoadInst* int32_49 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then6);
  int32_49->setAlignment(4);
  CallInst* int64_call7 = CallInst::Create(func_syscall, const_int64_27, "call7", label_if_then6);
  int64_call7->setCallingConv(CallingConv::C);
  int64_call7->setTailCall(false);
  AttributeSet int64_call7_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call7_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call7->setAttributes(int64_call7_PAL);

  std::vector<Value*> int32_call8_params;
  int32_call8_params.push_back(const_ptr_32);
  int32_call8_params.push_back(int32_49);
  int32_call8_params.push_back(int64_call7);
  CallInst* int32_call8 = CallInst::Create(func_printf, int32_call8_params, "call8", label_if_then6);
  int32_call8->setCallingConv(CallingConv::C);
  int32_call8->setTailCall(false);
  AttributeSet int32_call8_PAL;
  int32_call8->setAttributes(int32_call8_PAL);

  LoadInst* int32_50 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then6);
  int32_50->setAlignment(4);
  CastInst* int64_idxprom9 = new SExtInst(int32_50, IntegerType::get(mod->getContext(), 64), "idxprom9", label_if_then6);
  LoadInst* int32_51 = new LoadInst(ptr_tid, "", false, label_if_then6);
  int32_51->setAlignment(4);
  CastInst* int64_idxprom10 = new SExtInst(int32_51, IntegerType::get(mod->getContext(), 64), "idxprom10", label_if_then6);
  std::vector<Value*> ptr_arrayidx11_indices;
  ptr_arrayidx11_indices.push_back(const_int32_30);
  ptr_arrayidx11_indices.push_back(int64_idxprom10);
  Instruction* ptr_arrayidx11 = GetElementPtrInst::Create(gvar_array_duration_check_pp_nos, ptr_arrayidx11_indices, "arrayidx11", label_if_then6);
  std::vector<Value*> ptr_arrayidx12_indices;
  ptr_arrayidx12_indices.push_back(const_int32_30);
  ptr_arrayidx12_indices.push_back(int64_idxprom9);
  Instruction* ptr_arrayidx12 = GetElementPtrInst::Create(ptr_arrayidx11, ptr_arrayidx12_indices, "arrayidx12", label_if_then6);
  StoreInst* void_52 = new StoreInst(ptr_arrayidx12, ptr_spec, false, label_if_then6);
  void_52->setAlignment(8);
  LoadInst* ptr_53 = new LoadInst(ptr_spec, "", false, label_if_then6);
  ptr_53->setAlignment(8);
  std::vector<Value*> int32_call13_params;
  int32_call13_params.push_back(const_int32_30);
  int32_call13_params.push_back(ptr_53);
  CallInst* int32_call13 = CallInst::Create(func_clock_gettime, int32_call13_params, "call13", label_if_then6);
  int32_call13->setCallingConv(CallingConv::C);
  int32_call13->setTailCall(false);
  AttributeSet int32_call13_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int32_call13_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int32_call13->setAttributes(int32_call13_PAL);

  BranchInst::Create(label_if_end, label_if_then6);

  // Block if.end (label_if_end)
  BranchInst::Create(label_if_end14, label_if_end);

  // Block if.end14 (label_if_end14)
  LoadInst* int32_56 = new LoadInst(ptr_pp_no_addr, "", false, label_if_end14);
  int32_56->setAlignment(4);
  CastInst* int64_idxprom15 = new SExtInst(int32_56, IntegerType::get(mod->getContext(), 64), "idxprom15", label_if_end14);
  LoadInst* int32_57 = new LoadInst(ptr_tid, "", false, label_if_end14);
  int32_57->setAlignment(4);
  CastInst* int64_idxprom16 = new SExtInst(int32_57, IntegerType::get(mod->getContext(), 64), "idxprom16", label_if_end14);
  std::vector<Value*> ptr_arrayidx17_indices;
  ptr_arrayidx17_indices.push_back(const_int32_30);
  ptr_arrayidx17_indices.push_back(int64_idxprom16);
  Instruction* ptr_arrayidx17 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx17_indices, "arrayidx17", label_if_end14);
  std::vector<Value*> ptr_arrayidx18_indices;
  ptr_arrayidx18_indices.push_back(const_int32_30);
  ptr_arrayidx18_indices.push_back(int64_idxprom15);
  Instruction* ptr_arrayidx18 = GetElementPtrInst::Create(ptr_arrayidx17, ptr_arrayidx18_indices, "arrayidx18", label_if_end14);
  LoadInst* int64_58 = new LoadInst(ptr_arrayidx18, "", false, label_if_end14);
  int64_58->setAlignment(8);
  ICmpInst* int1_cmp19 = new ICmpInst(*label_if_end14, ICmpInst::ICMP_EQ, int64_58, const_int64_31, "cmp19");
  BranchInst::Create(label_if_then21, label_if_end29, int1_cmp19, label_if_end14);

  // Block if.then21 (label_if_then21)
  LoadInst* int32_60 = new LoadInst(ptr_tid, "", false, label_if_then21);
  int32_60->setAlignment(4);
  LoadInst* int32_61 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then21);
  int32_61->setAlignment(4);
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_60, int32_61, "add", label_if_then21);
  CastInst* int64_conv22 = new SExtInst(int32_add, IntegerType::get(mod->getContext(), 64), "conv22", label_if_then21);
  StoreInst* void_62 = new StoreInst(int64_conv22, ptr_pp_id, false, label_if_then21);
  void_62->setAlignment(8);
  LoadInst* int64_63 = new LoadInst(ptr_pp_id, "", false, label_if_then21);
  int64_63->setAlignment(8);
  LoadInst* int32_64 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then21);
  int32_64->setAlignment(4);
  CastInst* int64_idxprom23 = new SExtInst(int32_64, IntegerType::get(mod->getContext(), 64), "idxprom23", label_if_then21);
  LoadInst* int32_65 = new LoadInst(ptr_tid, "", false, label_if_then21);
  int32_65->setAlignment(4);
  CastInst* int64_idxprom24 = new SExtInst(int32_65, IntegerType::get(mod->getContext(), 64), "idxprom24", label_if_then21);
  std::vector<Value*> ptr_arrayidx25_indices;
  ptr_arrayidx25_indices.push_back(const_int32_30);
  ptr_arrayidx25_indices.push_back(int64_idxprom24);
  Instruction* ptr_arrayidx25 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx25_indices, "arrayidx25", label_if_then21);
  std::vector<Value*> ptr_arrayidx26_indices;
  ptr_arrayidx26_indices.push_back(const_int32_30);
  ptr_arrayidx26_indices.push_back(int64_idxprom23);
  Instruction* ptr_arrayidx26 = GetElementPtrInst::Create(ptr_arrayidx25, ptr_arrayidx26_indices, "arrayidx26", label_if_then21);
  StoreInst* void_66 = new StoreInst(int64_63, ptr_arrayidx26, false, label_if_then21);
  void_66->setAlignment(8);
  LoadInst* int32_67 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then21);
  int32_67->setAlignment(4);
  CallInst* int64_call27 = CallInst::Create(func_syscall, const_int64_27, "call27", label_if_then21);
  int64_call27->setCallingConv(CallingConv::C);
  int64_call27->setTailCall(false);
  AttributeSet int64_call27_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call27_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call27->setAttributes(int64_call27_PAL);

  LoadInst* ptr_68 = new LoadInst(ptr_user_d_addr, "", false, label_if_then21);
  ptr_68->setAlignment(8);
  std::vector<Value*> ptr_wss_indices;
  ptr_wss_indices.push_back(const_int32_30);
  ptr_wss_indices.push_back(const_int32_30);
  Instruction* ptr_wss = GetElementPtrInst::Create(ptr_68, ptr_wss_indices, "wss", label_if_then21);
  LoadInst* int32_69 = new LoadInst(ptr_wss, "", false, label_if_then21);
  int32_69->setAlignment(4);
  LoadInst* ptr_70 = new LoadInst(ptr_user_d_addr, "", false, label_if_then21);
  ptr_70->setAlignment(8);
  std::vector<Value*> ptr_reuse_indices;
  ptr_reuse_indices.push_back(const_int32_30);
  ptr_reuse_indices.push_back(const_int32_26);
  Instruction* ptr_reuse = GetElementPtrInst::Create(ptr_70, ptr_reuse_indices, "reuse", label_if_then21);
  LoadInst* int32_71 = new LoadInst(ptr_reuse, "", false, label_if_then21);
  int32_71->setAlignment(4);
  LoadInst* ptr_72 = new LoadInst(ptr_user_d_addr, "", false, label_if_then21);
  ptr_72->setAlignment(8);
  std::vector<Value*> ptr_resource_indices;
  ptr_resource_indices.push_back(const_int32_30);
  ptr_resource_indices.push_back(const_int32_34);
  Instruction* ptr_resource = GetElementPtrInst::Create(ptr_72, ptr_resource_indices, "resource", label_if_then21);
  LoadInst* int32_73 = new LoadInst(ptr_resource, "", false, label_if_then21);
  int32_73->setAlignment(4);
  std::vector<Value*> int32_call28_params;
  int32_call28_params.push_back(const_ptr_35);
  int32_call28_params.push_back(int32_67);
  int32_call28_params.push_back(int64_call27);
  int32_call28_params.push_back(int32_69);
  int32_call28_params.push_back(int32_71);
  int32_call28_params.push_back(int32_73);
  CallInst* int32_call28 = CallInst::Create(func_printf, int32_call28_params, "call28", label_if_then21);
  int32_call28->setCallingConv(CallingConv::C);
  int32_call28->setTailCall(false);
  AttributeSet int32_call28_PAL;
  int32_call28->setAttributes(int32_call28_PAL);

  BranchInst::Create(label_if_end29, label_if_then21);

  // Block if.end29 (label_if_end29)
  LoadInst* int64_75 = new LoadInst(ptr_pp_id, "", false, label_if_end29);
  int64_75->setAlignment(8);
  StoreInst* void_76 = new StoreInst(int64_75, ptr_retval, false, label_if_end29);
  BranchInst::Create(label_return, label_if_end29);

  // Block return (label_return)
  LoadInst* int64_78 = new LoadInst(ptr_retval, "", false, label_return);
  ReturnInst::Create(mod->getContext(), int64_78, label_return);
  return func_pp_begin;
}
