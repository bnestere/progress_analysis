// Generated by llvm2cpp - DO NOT MODIFY!
#include <type_traits>

#include "llvm/Pass.h"
#include "llvm/PassManager.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/APInt.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/GlobalVariable.h"
#include "llvm/IR/IRPrintingPasses.h"
#include "llvm/IR/InlineAsm.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/CFG.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/SourceMgr.h"

using namespace llvm;


Function* define_pp_end(Module *mod, GlobalVariable* gvar_array_active_pps, GlobalVariable* gvar_array_trust_pp_nos, GlobalVariable* gvar_array_duration_check_pp_nos) {

  // Type Definitions
  std::vector<Type*>FuncTy_0_args;
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 64));
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_0 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_0_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);

  PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

  StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
  if (!StructTy_struct_timespec) {
    StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
  }
  std::vector<Type*>StructTy_struct_timespec_fields;
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  if (StructTy_struct_timespec->isOpaque()) {
    StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
  }

  PointerType* PointerTy_3 = PointerType::get(StructTy_struct_timespec, 0);

  PointerType* PointerTy_4 = PointerType::get(PointerTy_3, 0);

  PointerType* PointerTy_5 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);

  std::vector<Type*>FuncTy_7_args;
  FuncTy_7_args.push_back(IntegerType::get(mod->getContext(), 64));
  FunctionType* FuncTy_7 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_7_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_6 = PointerType::get(FuncTy_7, 0);

  ArrayType* ArrayTy_9 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 128);

  PointerType* PointerTy_8 = PointerType::get(ArrayTy_9, 0);

  ArrayType* ArrayTy_11 = ArrayType::get(ArrayTy_9, 1024);

  PointerType* PointerTy_10 = PointerType::get(ArrayTy_11, 0);

  PointerType* PointerTy_12 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

  ArrayType* ArrayTy_14 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 46);

  PointerType* PointerTy_13 = PointerType::get(ArrayTy_14, 0);

  std::vector<Type*>FuncTy_16_args;
  FuncTy_16_args.push_back(PointerTy_12);
  FunctionType* FuncTy_16 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_16_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);

  ArrayType* ArrayTy_18 = ArrayType::get(StructTy_struct_timespec, 128);

  PointerType* PointerTy_17 = PointerType::get(ArrayTy_18, 0);

  ArrayType* ArrayTy_20 = ArrayType::get(ArrayTy_18, 1024);

  PointerType* PointerTy_19 = PointerType::get(ArrayTy_20, 0);

  std::vector<Type*>FuncTy_22_args;
  FuncTy_22_args.push_back(IntegerType::get(mod->getContext(), 32));
  FuncTy_22_args.push_back(PointerTy_3);
  FunctionType* FuncTy_22 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_22_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_21 = PointerType::get(FuncTy_22, 0);

  ArrayType* ArrayTy_24 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 49);

  PointerType* PointerTy_23 = PointerType::get(ArrayTy_24, 0);

  ArrayType* ArrayTy_26 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 22);

  PointerType* PointerTy_25 = PointerType::get(ArrayTy_26, 0);

  std::vector<Type*>FuncTy_28_args;
  FuncTy_28_args.push_back(PointerTy_12);
  FunctionType* FuncTy_28 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_28_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_27 = PointerType::get(FuncTy_28, 0);

  std::vector<Type*>FuncTy_30_args;
  FuncTy_30_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_30 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_30_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_29 = PointerType::get(FuncTy_30, 0);


  // Function Declarations

  Function* func_syscall = mod->getFunction("syscall");
  if (!func_syscall) {
    func_syscall = Function::Create(
        /*Type=*/FuncTy_7,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"syscall", mod); // (external, no body)
    func_syscall->setCallingConv(CallingConv::C);
  }
  AttributeSet func_syscall_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_syscall_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_syscall->setAttributes(func_syscall_PAL);

  Function* func_printf = mod->getFunction("printf");
  if (!func_printf) {
    func_printf = Function::Create(
        /*Type=*/FuncTy_16,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"printf", mod); // (external, no body)
    func_printf->setCallingConv(CallingConv::C);
  }
  AttributeSet func_printf_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_printf->setAttributes(func_printf_PAL);

  Function* func_clock_gettime = mod->getFunction("clock_gettime");
  if (!func_clock_gettime) {
    func_clock_gettime = Function::Create(
        /*Type=*/FuncTy_22,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"clock_gettime", mod); // (external, no body)
    func_clock_gettime->setCallingConv(CallingConv::C);
  }
  AttributeSet func_clock_gettime_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_clock_gettime_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_clock_gettime->setAttributes(func_clock_gettime_PAL);

  Function* func_perror = mod->getFunction("perror");
  if (!func_perror) {
    func_perror = Function::Create(
        /*Type=*/FuncTy_28,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"perror", mod); // (external, no body)
    func_perror->setCallingConv(CallingConv::C);
  }
  AttributeSet func_perror_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_perror_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_perror->setAttributes(func_perror_PAL);

  Function* func_exit = mod->getFunction("exit");
  if (!func_exit) {
    func_exit = Function::Create(
        /*Type=*/FuncTy_30,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"exit", mod); // (external, no body)
    func_exit->setCallingConv(CallingConv::C);
  }
  AttributeSet func_exit_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoReturn);
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_exit_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_exit->setAttributes(func_exit_PAL);

  // Global Variable Declarations

  GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_14,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str");
  gvar_array__str->setAlignment(1);

  GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_24,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str1");
  gvar_array__str1->setAlignment(1);

  GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_26,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str2");
  gvar_array__str2->setAlignment(1);

  // Constant Definitions
  ConstantInt* const_int32_31 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
  ConstantInt* const_int64_32 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("186"), 10));
  ConstantInt* const_int64_33 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1023"), 10));
  ConstantInt* const_int64_34 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
  ConstantInt* const_int32_35 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
  std::vector<Constant*> const_ptr_36_indices;
  const_ptr_36_indices.push_back(const_int32_35);
  const_ptr_36_indices.push_back(const_int32_35);
  Constant* const_ptr_36 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_36_indices);
  Constant *const_array_37 = ConstantDataArray::getString(mod->getContext(), "Ending pp_no %d tid %d pp id %ld activeo %ld\x0A", true);
  ConstantFP* const_double_38 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-09));
  ConstantFP* const_double_39 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-01));
  ConstantInt* const_int64_40 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-1"), 10));
  std::vector<Constant*> const_ptr_41_indices;
  const_ptr_41_indices.push_back(const_int32_35);
  const_ptr_41_indices.push_back(const_int32_35);
  Constant* const_ptr_41 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_41_indices);
  Constant *const_array_42 = ConstantDataArray::getString(mod->getContext(), "Ignoring because time is too short, pp %d: %.5f\x0A", true);
  ConstantInt* const_int64_43 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
  std::vector<Constant*> const_ptr_44_indices;
  const_ptr_44_indices.push_back(const_int32_35);
  const_ptr_44_indices.push_back(const_int32_35);
  Constant* const_ptr_44 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_44_indices);
  Constant *const_array_45 = ConstantDataArray::getString(mod->getContext(), "Syscall pp_end failed", true);

  // Global Variable Definitions
  gvar_array__str->setInitializer(const_array_37);
  gvar_array__str1->setInitializer(const_array_42);
  gvar_array__str2->setInitializer(const_array_45);

  Function* func_pp_end = mod->getFunction("pp_end");
  if (!func_pp_end) {
    func_pp_end = Function::Create(
        /*Type=*/FuncTy_0,
        /*Linkage=*/GlobalValue::InternalLinkage,
        /*Name=*/"pp_end", mod); 
    func_pp_end->setCallingConv(CallingConv::C);
  }
  AttributeSet func_pp_end_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      B.addAttribute(Attribute::UWTable);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_pp_end_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_pp_end->setAttributes(func_pp_end_PAL);
  Function::arg_iterator args = func_pp_end->arg_begin();
  Value* int64_pp_id = args++;
  int64_pp_id->setName("pp_id");
  Value* int32_pp_no = args++;
  int32_pp_no->setName("pp_no");

  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_pp_end,0);
  BasicBlock* label_land_lhs_true = BasicBlock::Create(mod->getContext(), "land.lhs.true",func_pp_end,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_pp_end,0);
  BasicBlock* label_if_then16 = BasicBlock::Create(mod->getContext(), "if.then16",func_pp_end,0);
  BasicBlock* label_if_then32 = BasicBlock::Create(mod->getContext(), "if.then32",func_pp_end,0);
  BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func_pp_end,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_pp_end,0);
  BasicBlock* label_if_end38 = BasicBlock::Create(mod->getContext(), "if.end38",func_pp_end,0);
  BasicBlock* label_if_then39 = BasicBlock::Create(mod->getContext(), "if.then39",func_pp_end,0);
  BasicBlock* label_if_end40 = BasicBlock::Create(mod->getContext(), "if.end40",func_pp_end,0);
  BasicBlock* label_if_end45 = BasicBlock::Create(mod->getContext(), "if.end45",func_pp_end,0);

  // Block entry (label_entry)
  AllocaInst* ptr_pp_id_addr = new AllocaInst(IntegerType::get(mod->getContext(), 64), "pp_id.addr", label_entry);
  ptr_pp_id_addr->setAlignment(8);
  AllocaInst* ptr_pp_no_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "pp_no.addr", label_entry);
  ptr_pp_no_addr->setAlignment(4);
  AllocaInst* ptr_tid = new AllocaInst(IntegerType::get(mod->getContext(), 32), "tid", label_entry);
  ptr_tid->setAlignment(4);
  AllocaInst* ptr_tend = new AllocaInst(StructTy_struct_timespec, "tend", label_entry);
  ptr_tend->setAlignment(8);
  AllocaInst* ptr_tstart = new AllocaInst(PointerTy_3, "tstart", label_entry);
  ptr_tstart->setAlignment(8);
  AllocaInst* ptr_diff = new AllocaInst(Type::getDoubleTy(mod->getContext()), "diff", label_entry);
  ptr_diff->setAlignment(8);
  AllocaInst* ptr_ret = new AllocaInst(IntegerType::get(mod->getContext(), 64), "ret", label_entry);
  ptr_ret->setAlignment(8);
  StoreInst* void_46 = new StoreInst(int64_pp_id, ptr_pp_id_addr, false, label_entry);
  void_46->setAlignment(8);
  StoreInst* void_47 = new StoreInst(int32_pp_no, ptr_pp_no_addr, false, label_entry);
  void_47->setAlignment(4);
  CallInst* int64_call = CallInst::Create(func_syscall, const_int64_32, "call", label_entry);
  int64_call->setCallingConv(CallingConv::C);
  int64_call->setTailCall(false);
  AttributeSet int64_call_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call->setAttributes(int64_call_PAL);

  BinaryOperator* int64_and = BinaryOperator::Create(Instruction::And, int64_call, const_int64_33, "and", label_entry);
  CastInst* int32_conv = new TruncInst(int64_and, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
  StoreInst* void_48 = new StoreInst(int32_conv, ptr_tid, false, label_entry);
  void_48->setAlignment(4);
  LoadInst* int64_49 = new LoadInst(ptr_pp_id_addr, "", false, label_entry);
  int64_49->setAlignment(8);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_SGT, int64_49, const_int64_34, "cmp");
  BranchInst::Create(label_land_lhs_true, label_if_end45, int1_cmp, label_entry);

  // Block land.lhs.true (label_land_lhs_true)
  LoadInst* int32_51 = new LoadInst(ptr_pp_no_addr, "", false, label_land_lhs_true);
  int32_51->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_51, IntegerType::get(mod->getContext(), 64), "idxprom", label_land_lhs_true);
  LoadInst* int32_52 = new LoadInst(ptr_tid, "", false, label_land_lhs_true);
  int32_52->setAlignment(4);
  CastInst* int64_idxprom2 = new SExtInst(int32_52, IntegerType::get(mod->getContext(), 64), "idxprom2", label_land_lhs_true);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_35);
  ptr_arrayidx_indices.push_back(int64_idxprom2);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx_indices, "arrayidx", label_land_lhs_true);
  std::vector<Value*> ptr_arrayidx3_indices;
  ptr_arrayidx3_indices.push_back(const_int32_35);
  ptr_arrayidx3_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx3 = GetElementPtrInst::Create(ptr_arrayidx, ptr_arrayidx3_indices, "arrayidx3", label_land_lhs_true);
  LoadInst* int64_53 = new LoadInst(ptr_arrayidx3, "", false, label_land_lhs_true);
  int64_53->setAlignment(8);
  LoadInst* int64_54 = new LoadInst(ptr_pp_id_addr, "", false, label_land_lhs_true);
  int64_54->setAlignment(8);
  ICmpInst* int1_cmp4 = new ICmpInst(*label_land_lhs_true, ICmpInst::ICMP_EQ, int64_53, int64_54, "cmp4");
  BranchInst::Create(label_if_then, label_if_end45, int1_cmp4, label_land_lhs_true);

  // Block if.then (label_if_then)
  LoadInst* int32_56 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
  int32_56->setAlignment(4);
  CallInst* int64_call6 = CallInst::Create(func_syscall, const_int64_32, "call6", label_if_then);
  int64_call6->setCallingConv(CallingConv::C);
  int64_call6->setTailCall(false);
  AttributeSet int64_call6_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call6_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call6->setAttributes(int64_call6_PAL);

  LoadInst* int64_57 = new LoadInst(ptr_pp_id_addr, "", false, label_if_then);
  int64_57->setAlignment(8);
  LoadInst* int32_58 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
  int32_58->setAlignment(4);
  CastInst* int64_idxprom7 = new SExtInst(int32_58, IntegerType::get(mod->getContext(), 64), "idxprom7", label_if_then);
  LoadInst* int32_59 = new LoadInst(ptr_tid, "", false, label_if_then);
  int32_59->setAlignment(4);
  CastInst* int64_idxprom8 = new SExtInst(int32_59, IntegerType::get(mod->getContext(), 64), "idxprom8", label_if_then);
  std::vector<Value*> ptr_arrayidx9_indices;
  ptr_arrayidx9_indices.push_back(const_int32_35);
  ptr_arrayidx9_indices.push_back(int64_idxprom8);
  Instruction* ptr_arrayidx9 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx9_indices, "arrayidx9", label_if_then);
  std::vector<Value*> ptr_arrayidx10_indices;
  ptr_arrayidx10_indices.push_back(const_int32_35);
  ptr_arrayidx10_indices.push_back(int64_idxprom7);
  Instruction* ptr_arrayidx10 = GetElementPtrInst::Create(ptr_arrayidx9, ptr_arrayidx10_indices, "arrayidx10", label_if_then);
  LoadInst* int64_60 = new LoadInst(ptr_arrayidx10, "", false, label_if_then);
  int64_60->setAlignment(8);
  std::vector<Value*> int32_call11_params;
  int32_call11_params.push_back(const_ptr_36);
  int32_call11_params.push_back(int32_56);
  int32_call11_params.push_back(int64_call6);
  int32_call11_params.push_back(int64_57);
  int32_call11_params.push_back(int64_60);
  CallInst* int32_call11 = CallInst::Create(func_printf, int32_call11_params, "call11", label_if_then);
  int32_call11->setCallingConv(CallingConv::C);
  int32_call11->setTailCall(false);
  AttributeSet int32_call11_PAL;
  int32_call11->setAttributes(int32_call11_PAL);

  LoadInst* int32_61 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
  int32_61->setAlignment(4);
  CastInst* int64_idxprom12 = new SExtInst(int32_61, IntegerType::get(mod->getContext(), 64), "idxprom12", label_if_then);
  std::vector<Value*> ptr_arrayidx13_indices;
  ptr_arrayidx13_indices.push_back(const_int32_35);
  ptr_arrayidx13_indices.push_back(int64_idxprom12);
  Instruction* ptr_arrayidx13 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx13_indices, "arrayidx13", label_if_then);
  LoadInst* int64_62 = new LoadInst(ptr_arrayidx13, "", false, label_if_then);
  int64_62->setAlignment(8);
  ICmpInst* int1_cmp14 = new ICmpInst(*label_if_then, ICmpInst::ICMP_EQ, int64_62, const_int64_34, "cmp14");
  BranchInst::Create(label_if_then16, label_if_end38, int1_cmp14, label_if_then);

  // Block if.then16 (label_if_then16)
  LoadInst* int32_64 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then16);
  int32_64->setAlignment(4);
  CastInst* int64_idxprom17 = new SExtInst(int32_64, IntegerType::get(mod->getContext(), 64), "idxprom17", label_if_then16);
  LoadInst* int32_65 = new LoadInst(ptr_tid, "", false, label_if_then16);
  int32_65->setAlignment(4);
  CastInst* int64_idxprom18 = new SExtInst(int32_65, IntegerType::get(mod->getContext(), 64), "idxprom18", label_if_then16);
  std::vector<Value*> ptr_arrayidx19_indices;
  ptr_arrayidx19_indices.push_back(const_int32_35);
  ptr_arrayidx19_indices.push_back(int64_idxprom18);
  Instruction* ptr_arrayidx19 = GetElementPtrInst::Create(gvar_array_duration_check_pp_nos, ptr_arrayidx19_indices, "arrayidx19", label_if_then16);
  std::vector<Value*> ptr_arrayidx20_indices;
  ptr_arrayidx20_indices.push_back(const_int32_35);
  ptr_arrayidx20_indices.push_back(int64_idxprom17);
  Instruction* ptr_arrayidx20 = GetElementPtrInst::Create(ptr_arrayidx19, ptr_arrayidx20_indices, "arrayidx20", label_if_then16);
  StoreInst* void_66 = new StoreInst(ptr_arrayidx20, ptr_tstart, false, label_if_then16);
  void_66->setAlignment(8);
  std::vector<Value*> int32_call21_params;
  int32_call21_params.push_back(const_int32_35);
  int32_call21_params.push_back(ptr_tend);
  CallInst* int32_call21 = CallInst::Create(func_clock_gettime, int32_call21_params, "call21", label_if_then16);
  int32_call21->setCallingConv(CallingConv::C);
  int32_call21->setTailCall(false);
  AttributeSet int32_call21_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int32_call21_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int32_call21->setAttributes(int32_call21_PAL);

  std::vector<Value*> ptr_tv_sec_indices;
  ptr_tv_sec_indices.push_back(const_int32_35);
  ptr_tv_sec_indices.push_back(const_int32_35);
  Instruction* ptr_tv_sec = GetElementPtrInst::Create(ptr_tend, ptr_tv_sec_indices, "tv_sec", label_if_then16);
  LoadInst* int64_67 = new LoadInst(ptr_tv_sec, "", false, label_if_then16);
  int64_67->setAlignment(8);
  CastInst* double_conv22 = new SIToFPInst(int64_67, Type::getDoubleTy(mod->getContext()), "conv22", label_if_then16);
  std::vector<Value*> ptr_tv_nsec_indices;
  ptr_tv_nsec_indices.push_back(const_int32_35);
  ptr_tv_nsec_indices.push_back(const_int32_31);
  Instruction* ptr_tv_nsec = GetElementPtrInst::Create(ptr_tend, ptr_tv_nsec_indices, "tv_nsec", label_if_then16);
  LoadInst* int64_68 = new LoadInst(ptr_tv_nsec, "", false, label_if_then16);
  int64_68->setAlignment(8);
  CastInst* double_conv23 = new SIToFPInst(int64_68, Type::getDoubleTy(mod->getContext()), "conv23", label_if_then16);
  BinaryOperator* double_mul = BinaryOperator::Create(Instruction::FMul, const_double_38, double_conv23, "mul", label_if_then16);
  BinaryOperator* double_add = BinaryOperator::Create(Instruction::FAdd, double_conv22, double_mul, "add", label_if_then16);
  LoadInst* ptr_69 = new LoadInst(ptr_tstart, "", false, label_if_then16);
  ptr_69->setAlignment(8);
  std::vector<Value*> ptr_tv_sec24_indices;
  ptr_tv_sec24_indices.push_back(const_int32_35);
  ptr_tv_sec24_indices.push_back(const_int32_35);
  Instruction* ptr_tv_sec24 = GetElementPtrInst::Create(ptr_69, ptr_tv_sec24_indices, "tv_sec24", label_if_then16);
  LoadInst* int64_70 = new LoadInst(ptr_tv_sec24, "", false, label_if_then16);
  int64_70->setAlignment(8);
  CastInst* double_conv25 = new SIToFPInst(int64_70, Type::getDoubleTy(mod->getContext()), "conv25", label_if_then16);
  LoadInst* ptr_71 = new LoadInst(ptr_tstart, "", false, label_if_then16);
  ptr_71->setAlignment(8);
  std::vector<Value*> ptr_tv_nsec26_indices;
  ptr_tv_nsec26_indices.push_back(const_int32_35);
  ptr_tv_nsec26_indices.push_back(const_int32_31);
  Instruction* ptr_tv_nsec26 = GetElementPtrInst::Create(ptr_71, ptr_tv_nsec26_indices, "tv_nsec26", label_if_then16);
  LoadInst* int64_72 = new LoadInst(ptr_tv_nsec26, "", false, label_if_then16);
  int64_72->setAlignment(8);
  CastInst* double_conv27 = new SIToFPInst(int64_72, Type::getDoubleTy(mod->getContext()), "conv27", label_if_then16);
  BinaryOperator* double_mul28 = BinaryOperator::Create(Instruction::FMul, const_double_38, double_conv27, "mul28", label_if_then16);
  BinaryOperator* double_add29 = BinaryOperator::Create(Instruction::FAdd, double_conv25, double_mul28, "add29", label_if_then16);
  BinaryOperator* double_sub = BinaryOperator::Create(Instruction::FSub, double_add, double_add29, "sub", label_if_then16);
  StoreInst* void_73 = new StoreInst(double_sub, ptr_diff, false, label_if_then16);
  void_73->setAlignment(8);
  LoadInst* double_74 = new LoadInst(ptr_diff, "", false, label_if_then16);
  double_74->setAlignment(8);
  FCmpInst* int1_cmp30 = new FCmpInst(*label_if_then16, FCmpInst::FCMP_OLT, double_74, const_double_39, "cmp30");
  BranchInst::Create(label_if_then32, label_if_else, int1_cmp30, label_if_then16);

  // Block if.then32 (label_if_then32)
  LoadInst* int32_76 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then32);
  int32_76->setAlignment(4);
  CastInst* int64_idxprom33 = new SExtInst(int32_76, IntegerType::get(mod->getContext(), 64), "idxprom33", label_if_then32);
  std::vector<Value*> ptr_arrayidx34_indices;
  ptr_arrayidx34_indices.push_back(const_int32_35);
  ptr_arrayidx34_indices.push_back(int64_idxprom33);
  Instruction* ptr_arrayidx34 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx34_indices, "arrayidx34", label_if_then32);
  StoreInst* void_77 = new StoreInst(const_int64_40, ptr_arrayidx34, false, label_if_then32);
  void_77->setAlignment(8);
  LoadInst* int32_78 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then32);
  int32_78->setAlignment(4);
  LoadInst* double_79 = new LoadInst(ptr_diff, "", false, label_if_then32);
  double_79->setAlignment(8);
  std::vector<Value*> int32_call35_params;
  int32_call35_params.push_back(const_ptr_41);
  int32_call35_params.push_back(int32_78);
  int32_call35_params.push_back(double_79);
  CallInst* int32_call35 = CallInst::Create(func_printf, int32_call35_params, "call35", label_if_then32);
  int32_call35->setCallingConv(CallingConv::C);
  int32_call35->setTailCall(false);
  AttributeSet int32_call35_PAL;
  int32_call35->setAttributes(int32_call35_PAL);

  BranchInst::Create(label_if_end, label_if_then32);

  // Block if.else (label_if_else)
  LoadInst* int32_81 = new LoadInst(ptr_pp_no_addr, "", false, label_if_else);
  int32_81->setAlignment(4);
  CastInst* int64_idxprom36 = new SExtInst(int32_81, IntegerType::get(mod->getContext(), 64), "idxprom36", label_if_else);
  std::vector<Value*> ptr_arrayidx37_indices;
  ptr_arrayidx37_indices.push_back(const_int32_35);
  ptr_arrayidx37_indices.push_back(int64_idxprom36);
  Instruction* ptr_arrayidx37 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx37_indices, "arrayidx37", label_if_else);
  StoreInst* void_82 = new StoreInst(const_int64_43, ptr_arrayidx37, false, label_if_else);
  void_82->setAlignment(8);
  BranchInst::Create(label_if_end, label_if_else);

  // Block if.end (label_if_end)
  BranchInst::Create(label_if_end38, label_if_end);

  // Block if.end38 (label_if_end38)
  StoreInst* void_85 = new StoreInst(const_int64_34, ptr_ret, false, label_if_end38);
  void_85->setAlignment(8);
  LoadInst* int64_86 = new LoadInst(ptr_ret, "", false, label_if_end38);
  int64_86->setAlignment(8);
  ICmpInst* int1_tobool = new ICmpInst(*label_if_end38, ICmpInst::ICMP_NE, int64_86, const_int64_34, "tobool");
  BranchInst::Create(label_if_then39, label_if_end40, int1_tobool, label_if_end38);

  // Block if.then39 (label_if_then39)
  CallInst* void_88 = CallInst::Create(func_perror, const_ptr_44, "", label_if_then39);
  void_88->setCallingConv(CallingConv::C);
  void_88->setTailCall(false);
  AttributeSet void_88_PAL;
  void_88->setAttributes(void_88_PAL);

  CallInst* void_89 = CallInst::Create(func_exit, const_int32_31, "", label_if_then39);
  void_89->setCallingConv(CallingConv::C);
  void_89->setTailCall(false);
  AttributeSet void_89_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoReturn);
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    void_89_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  void_89->setAttributes(void_89_PAL);

  new UnreachableInst(mod->getContext(), label_if_then39);

  // Block if.end40 (label_if_end40)
  LoadInst* int32_91 = new LoadInst(ptr_pp_no_addr, "", false, label_if_end40);
  int32_91->setAlignment(4);
  CastInst* int64_idxprom41 = new SExtInst(int32_91, IntegerType::get(mod->getContext(), 64), "idxprom41", label_if_end40);
  LoadInst* int32_92 = new LoadInst(ptr_tid, "", false, label_if_end40);
  int32_92->setAlignment(4);
  CastInst* int64_idxprom42 = new SExtInst(int32_92, IntegerType::get(mod->getContext(), 64), "idxprom42", label_if_end40);
  std::vector<Value*> ptr_arrayidx43_indices;
  ptr_arrayidx43_indices.push_back(const_int32_35);
  ptr_arrayidx43_indices.push_back(int64_idxprom42);
  Instruction* ptr_arrayidx43 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx43_indices, "arrayidx43", label_if_end40);
  std::vector<Value*> ptr_arrayidx44_indices;
  ptr_arrayidx44_indices.push_back(const_int32_35);
  ptr_arrayidx44_indices.push_back(int64_idxprom41);
  Instruction* ptr_arrayidx44 = GetElementPtrInst::Create(ptr_arrayidx43, ptr_arrayidx44_indices, "arrayidx44", label_if_end40);
  StoreInst* void_93 = new StoreInst(const_int64_34, ptr_arrayidx44, false, label_if_end40);
  void_93->setAlignment(8);
  BranchInst::Create(label_if_end45, label_if_end40);

  // Block if.end45 (label_if_end45)
  ReturnInst::Create(mod->getContext(), label_if_end45);
  return func_pp_end;
}
