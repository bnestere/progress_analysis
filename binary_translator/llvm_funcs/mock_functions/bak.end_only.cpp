// Generated by llvm2cpp - DO NOT MODIFY!
#include <type_traits>

#include "llvm/Pass.h"
#include "llvm/PassManager.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/APInt.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/GlobalVariable.h"
#include "llvm/IR/IRPrintingPasses.h"
#include "llvm/IR/InlineAsm.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/CFG.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/SourceMgr.h"

using namespace llvm;


Function* define_pp_end(Module *mod, GlobalVariable* gvar_array_active_pps, GlobalVariable* gvar_array_trust_pp_nos, GlobalVariable* gvar_array_duration_check_pp_nos) {

  // Type Definitions
  std::vector<Type*>FuncTy_0_args;
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 64));
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_0 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_0_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);

  PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

  std::vector<Type*>FuncTy_4_args;
  FuncTy_4_args.push_back(IntegerType::get(mod->getContext(), 64));
  FunctionType* FuncTy_4 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_4_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_3 = PointerType::get(FuncTy_4, 0);

  ArrayType* ArrayTy_6 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 128);

  PointerType* PointerTy_5 = PointerType::get(ArrayTy_6, 0);

  ArrayType* ArrayTy_8 = ArrayType::get(ArrayTy_6, 1024);

  PointerType* PointerTy_7 = PointerType::get(ArrayTy_8, 0);

  PointerType* PointerTy_9 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

  ArrayType* ArrayTy_11 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 39);

  PointerType* PointerTy_10 = PointerType::get(ArrayTy_11, 0);

  std::vector<Type*>FuncTy_13_args;
  FuncTy_13_args.push_back(PointerTy_9);
  FunctionType* FuncTy_13 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_13_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);

  ArrayType* ArrayTy_15 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 22);

  PointerType* PointerTy_14 = PointerType::get(ArrayTy_15, 0);

  std::vector<Type*>FuncTy_17_args;
  FuncTy_17_args.push_back(PointerTy_9);
  FunctionType* FuncTy_17 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_17_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_16 = PointerType::get(FuncTy_17, 0);

  std::vector<Type*>FuncTy_19_args;
  FuncTy_19_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_19 = FunctionType::get(
      /*Result=*/Type::getVoidTy(mod->getContext()),
      /*Params=*/FuncTy_19_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_18 = PointerType::get(FuncTy_19, 0);


  // Function Declarations

  Function* func_syscall = mod->getFunction("syscall");
  if (!func_syscall) {
    func_syscall = Function::Create(
        /*Type=*/FuncTy_4,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"syscall", mod); // (external, no body)
    func_syscall->setCallingConv(CallingConv::C);
  }
  AttributeSet func_syscall_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_syscall_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_syscall->setAttributes(func_syscall_PAL);

  Function* func_printf = mod->getFunction("printf");
  if (!func_printf) {
    func_printf = Function::Create(
        /*Type=*/FuncTy_13,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"printf", mod); // (external, no body)
    func_printf->setCallingConv(CallingConv::C);
  }
  AttributeSet func_printf_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_printf->setAttributes(func_printf_PAL);

  Function* func_perror = mod->getFunction("perror");
  if (!func_perror) {
    func_perror = Function::Create(
        /*Type=*/FuncTy_17,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"perror", mod); // (external, no body)
    func_perror->setCallingConv(CallingConv::C);
  }
  AttributeSet func_perror_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_perror_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_perror->setAttributes(func_perror_PAL);

  Function* func_exit = mod->getFunction("exit");
  if (!func_exit) {
    func_exit = Function::Create(
        /*Type=*/FuncTy_19,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"exit", mod); // (external, no body)
    func_exit->setCallingConv(CallingConv::C);
  }
  AttributeSet func_exit_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoReturn);
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_exit_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_exit->setAttributes(func_exit_PAL);

  // Global Variable Declarations

//  GlobalVariable* gvar_array_active_pps = new GlobalVariable(/*Module=*/*mod, 
//      /*Type=*/ArrayTy_8,
//      /*isConstant=*/false,
//      /*Linkage=*/GlobalValue::ExternalLinkage,
//      /*Initializer=*/0, 
//      /*Name=*/"active_pps");

  GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_11,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str");
  gvar_array__str->setAlignment(1);

  GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
      /*Type=*/ArrayTy_15,
      /*isConstant=*/true,
      /*Linkage=*/GlobalValue::PrivateLinkage,
      /*Initializer=*/0, // has initializer, specified below
      /*Name=*/".str1");
  gvar_array__str1->setAlignment(1);

  // Constant Definitions
  ConstantInt* const_int32_20 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
  ConstantInt* const_int64_21 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("186"), 10));
  ConstantInt* const_int64_22 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1023"), 10));
  ConstantInt* const_int64_23 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
  ConstantInt* const_int32_24 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
  std::vector<Constant*> const_ptr_25_indices;
  const_ptr_25_indices.push_back(const_int32_24);
  const_ptr_25_indices.push_back(const_int32_24);
  Constant* const_ptr_25 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_25_indices);
  Constant *const_array_26 = ConstantDataArray::getString(mod->getContext(), "Ending pp_no %d pp id %ld activeo %ld\x0A", true);
  std::vector<Constant*> const_ptr_27_indices;
  const_ptr_27_indices.push_back(const_int32_24);
  const_ptr_27_indices.push_back(const_int32_24);
  Constant* const_ptr_27 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_27_indices);
  Constant *const_array_28 = ConstantDataArray::getString(mod->getContext(), "Syscall pp_end failed", true);

  // Global Variable Definitions
  gvar_array__str->setInitializer(const_array_26);
  gvar_array__str1->setInitializer(const_array_28);

  Function* func_pp_end = mod->getFunction("pp_end");
  if (!func_pp_end) {
    func_pp_end = Function::Create(
        /*Type=*/FuncTy_0,
        /*Linkage=*/GlobalValue::InternalLinkage,
        /*Name=*/"pp_end", mod); 
    func_pp_end->setCallingConv(CallingConv::C);
  }
  AttributeSet func_pp_end_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      B.addAttribute(Attribute::UWTable);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_pp_end_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_pp_end->setAttributes(func_pp_end_PAL);
  Function::arg_iterator args = func_pp_end->arg_begin();
  Value* int64_pp_id = args++;
  int64_pp_id->setName("pp_id");
  Value* int32_pp_no = args++;
  int32_pp_no->setName("pp_no");

  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_pp_end,0);
  BasicBlock* label_land_lhs_true = BasicBlock::Create(mod->getContext(), "land.lhs.true",func_pp_end,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_pp_end,0);
  BasicBlock* label_if_then11 = BasicBlock::Create(mod->getContext(), "if.then11",func_pp_end,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_pp_end,0);
  BasicBlock* label_if_end16 = BasicBlock::Create(mod->getContext(), "if.end16",func_pp_end,0);

  // Block entry (label_entry)
  AllocaInst* ptr_pp_id_addr = new AllocaInst(IntegerType::get(mod->getContext(), 64), "pp_id.addr", label_entry);
  ptr_pp_id_addr->setAlignment(8);
  AllocaInst* ptr_pp_no_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "pp_no.addr", label_entry);
  ptr_pp_no_addr->setAlignment(4);
  AllocaInst* ptr_tid = new AllocaInst(IntegerType::get(mod->getContext(), 32), "tid", label_entry);
  ptr_tid->setAlignment(4);
  AllocaInst* ptr_ret = new AllocaInst(IntegerType::get(mod->getContext(), 64), "ret", label_entry);
  ptr_ret->setAlignment(8);
  StoreInst* void_29 = new StoreInst(int64_pp_id, ptr_pp_id_addr, false, label_entry);
  void_29->setAlignment(8);
  StoreInst* void_30 = new StoreInst(int32_pp_no, ptr_pp_no_addr, false, label_entry);
  void_30->setAlignment(4);
  CallInst* int64_call = CallInst::Create(func_syscall, const_int64_21, "call", label_entry);
  int64_call->setCallingConv(CallingConv::C);
  int64_call->setTailCall(false);
  AttributeSet int64_call_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call->setAttributes(int64_call_PAL);

  BinaryOperator* int64_and = BinaryOperator::Create(Instruction::And, int64_call, const_int64_22, "and", label_entry);
  CastInst* int32_conv = new TruncInst(int64_and, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
  StoreInst* void_31 = new StoreInst(int32_conv, ptr_tid, false, label_entry);
  void_31->setAlignment(4);
  LoadInst* int64_32 = new LoadInst(ptr_pp_id_addr, "", false, label_entry);
  int64_32->setAlignment(8);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_SGT, int64_32, const_int64_23, "cmp");
  BranchInst::Create(label_land_lhs_true, label_if_end16, int1_cmp, label_entry);

  // Block land.lhs.true (label_land_lhs_true)
  LoadInst* int32_34 = new LoadInst(ptr_pp_no_addr, "", false, label_land_lhs_true);
  int32_34->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_34, IntegerType::get(mod->getContext(), 64), "idxprom", label_land_lhs_true);
  LoadInst* int32_35 = new LoadInst(ptr_tid, "", false, label_land_lhs_true);
  int32_35->setAlignment(4);
  CastInst* int64_idxprom2 = new SExtInst(int32_35, IntegerType::get(mod->getContext(), 64), "idxprom2", label_land_lhs_true);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_24);
  ptr_arrayidx_indices.push_back(int64_idxprom2);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx_indices, "arrayidx", label_land_lhs_true);
  std::vector<Value*> ptr_arrayidx3_indices;
  ptr_arrayidx3_indices.push_back(const_int32_24);
  ptr_arrayidx3_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx3 = GetElementPtrInst::Create(ptr_arrayidx, ptr_arrayidx3_indices, "arrayidx3", label_land_lhs_true);
  LoadInst* int64_36 = new LoadInst(ptr_arrayidx3, "", false, label_land_lhs_true);
  int64_36->setAlignment(8);
  LoadInst* int64_37 = new LoadInst(ptr_pp_id_addr, "", false, label_land_lhs_true);
  int64_37->setAlignment(8);
  ICmpInst* int1_cmp4 = new ICmpInst(*label_land_lhs_true, ICmpInst::ICMP_EQ, int64_36, int64_37, "cmp4");
  BranchInst::Create(label_if_then, label_if_end16, int1_cmp4, label_land_lhs_true);

  // Block if.then (label_if_then)
  LoadInst* int32_39 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
  int32_39->setAlignment(4);
  LoadInst* int64_40 = new LoadInst(ptr_pp_id_addr, "", false, label_if_then);
  int64_40->setAlignment(8);
  LoadInst* int32_41 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then);
  int32_41->setAlignment(4);
  CastInst* int64_idxprom6 = new SExtInst(int32_41, IntegerType::get(mod->getContext(), 64), "idxprom6", label_if_then);
  LoadInst* int32_42 = new LoadInst(ptr_tid, "", false, label_if_then);
  int32_42->setAlignment(4);
  CastInst* int64_idxprom7 = new SExtInst(int32_42, IntegerType::get(mod->getContext(), 64), "idxprom7", label_if_then);
  std::vector<Value*> ptr_arrayidx8_indices;
  ptr_arrayidx8_indices.push_back(const_int32_24);
  ptr_arrayidx8_indices.push_back(int64_idxprom7);
  Instruction* ptr_arrayidx8 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx8_indices, "arrayidx8", label_if_then);
  std::vector<Value*> ptr_arrayidx9_indices;
  ptr_arrayidx9_indices.push_back(const_int32_24);
  ptr_arrayidx9_indices.push_back(int64_idxprom6);
  Instruction* ptr_arrayidx9 = GetElementPtrInst::Create(ptr_arrayidx8, ptr_arrayidx9_indices, "arrayidx9", label_if_then);
  LoadInst* int64_43 = new LoadInst(ptr_arrayidx9, "", false, label_if_then);
  int64_43->setAlignment(8);
  std::vector<Value*> int32_call10_params;
  int32_call10_params.push_back(const_ptr_25);
  int32_call10_params.push_back(int32_39);
  int32_call10_params.push_back(int64_40);
  int32_call10_params.push_back(int64_43);
  CallInst* int32_call10 = CallInst::Create(func_printf, int32_call10_params, "call10", label_if_then);
  int32_call10->setCallingConv(CallingConv::C);
  int32_call10->setTailCall(false);
  AttributeSet int32_call10_PAL;
  int32_call10->setAttributes(int32_call10_PAL);

  StoreInst* void_44 = new StoreInst(const_int64_23, ptr_ret, false, label_if_then);
  void_44->setAlignment(8);
  LoadInst* int64_45 = new LoadInst(ptr_ret, "", false, label_if_then);
  int64_45->setAlignment(8);
  ICmpInst* int1_tobool = new ICmpInst(*label_if_then, ICmpInst::ICMP_NE, int64_45, const_int64_23, "tobool");
  BranchInst::Create(label_if_then11, label_if_end, int1_tobool, label_if_then);

  // Block if.then11 (label_if_then11)
  CallInst* void_47 = CallInst::Create(func_perror, const_ptr_27, "", label_if_then11);
  void_47->setCallingConv(CallingConv::C);
  void_47->setTailCall(false);
  AttributeSet void_47_PAL;
  void_47->setAttributes(void_47_PAL);

  CallInst* void_48 = CallInst::Create(func_exit, const_int32_20, "", label_if_then11);
  void_48->setCallingConv(CallingConv::C);
  void_48->setTailCall(false);
  AttributeSet void_48_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoReturn);
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    void_48_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  void_48->setAttributes(void_48_PAL);

  new UnreachableInst(mod->getContext(), label_if_then11);

  // Block if.end (label_if_end)
  LoadInst* int32_50 = new LoadInst(ptr_pp_no_addr, "", false, label_if_end);
  int32_50->setAlignment(4);
  CastInst* int64_idxprom12 = new SExtInst(int32_50, IntegerType::get(mod->getContext(), 64), "idxprom12", label_if_end);
  LoadInst* int32_51 = new LoadInst(ptr_tid, "", false, label_if_end);
  int32_51->setAlignment(4);
  CastInst* int64_idxprom13 = new SExtInst(int32_51, IntegerType::get(mod->getContext(), 64), "idxprom13", label_if_end);
  std::vector<Value*> ptr_arrayidx14_indices;
  ptr_arrayidx14_indices.push_back(const_int32_24);
  ptr_arrayidx14_indices.push_back(int64_idxprom13);
  Instruction* ptr_arrayidx14 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx14_indices, "arrayidx14", label_if_end);
  std::vector<Value*> ptr_arrayidx15_indices;
  ptr_arrayidx15_indices.push_back(const_int32_24);
  ptr_arrayidx15_indices.push_back(int64_idxprom12);
  Instruction* ptr_arrayidx15 = GetElementPtrInst::Create(ptr_arrayidx14, ptr_arrayidx15_indices, "arrayidx15", label_if_end);
  StoreInst* void_52 = new StoreInst(const_int64_23, ptr_arrayidx15, false, label_if_end);
  void_52->setAlignment(8);
  BranchInst::Create(label_if_end16, label_if_end);

  // Block if.end16 (label_if_end16)
  ReturnInst::Create(mod->getContext(), label_if_end16);
  return func_pp_end;
}
