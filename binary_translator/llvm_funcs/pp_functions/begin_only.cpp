// Generated by llvm2cpp - DO NOT MODIFY!
#include <type_traits>

#include "llvm/Pass.h"
#include "llvm/PassManager.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/ADT/APInt.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/GlobalVariable.h"
#include "llvm/IR/IRPrintingPasses.h"
#include "llvm/IR/InlineAsm.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/CFG.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/SourceMgr.h"

using namespace llvm;


Function* define_pp_begin(Module *mod, GlobalVariable* gvar_array_active_pps, GlobalVariable* gvar_array_trust_pp_nos, GlobalVariable* gvar_array_duration_check_pp_nos) {

  // Type Definitions
  std::vector<Type*>FuncTy_0_args;
  StructType *StructTy_struct__pp_user_t = mod->getTypeByName("struct._pp_user_t");
  if (!StructTy_struct__pp_user_t) {
    StructTy_struct__pp_user_t = StructType::create(mod->getContext(), "struct._pp_user_t");
  }
  std::vector<Type*>StructTy_struct__pp_user_t_fields;
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  StructTy_struct__pp_user_t_fields.push_back(IntegerType::get(mod->getContext(), 32));
  if (StructTy_struct__pp_user_t->isOpaque()) {
    StructTy_struct__pp_user_t->setBody(StructTy_struct__pp_user_t_fields, /*isPacked=*/false);
  }

  PointerType* PointerTy_1 = PointerType::get(StructTy_struct__pp_user_t, 0);

  FuncTy_0_args.push_back(PointerTy_1);
  FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_0 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_0_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);

  PointerType* PointerTy_3 = PointerType::get(PointerTy_1, 0);

  PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

  StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
  if (!StructTy_struct_timespec) {
    StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
  }
  std::vector<Type*>StructTy_struct_timespec_fields;
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
  if (StructTy_struct_timespec->isOpaque()) {
    StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
  }

  PointerType* PointerTy_6 = PointerType::get(StructTy_struct_timespec, 0);

  PointerType* PointerTy_5 = PointerType::get(PointerTy_6, 0);

  std::vector<Type*>FuncTy_8_args;
  FuncTy_8_args.push_back(IntegerType::get(mod->getContext(), 64));
  FunctionType* FuncTy_8 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 64),
      /*Params=*/FuncTy_8_args,
      /*isVarArg=*/true);

  PointerType* PointerTy_7 = PointerType::get(FuncTy_8, 0);

  ArrayType* ArrayTy_10 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 128);

  PointerType* PointerTy_9 = PointerType::get(ArrayTy_10, 0);

  ArrayType* ArrayTy_12 = ArrayType::get(StructTy_struct_timespec, 128);

  PointerType* PointerTy_11 = PointerType::get(ArrayTy_12, 0);

  ArrayType* ArrayTy_14 = ArrayType::get(ArrayTy_12, 1024);

  PointerType* PointerTy_13 = PointerType::get(ArrayTy_14, 0);

  std::vector<Type*>FuncTy_16_args;
  FuncTy_16_args.push_back(IntegerType::get(mod->getContext(), 32));
  FuncTy_16_args.push_back(PointerTy_6);
  FunctionType* FuncTy_16 = FunctionType::get(
      /*Result=*/IntegerType::get(mod->getContext(), 32),
      /*Params=*/FuncTy_16_args,
      /*isVarArg=*/false);

  PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);

  ArrayType* ArrayTy_18 = ArrayType::get(ArrayTy_10, 1024);

  PointerType* PointerTy_17 = PointerType::get(ArrayTy_18, 0);

  PointerType* PointerTy_19 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);


  // Function Declarations

  Function* func_syscall = mod->getFunction("syscall");
  if (!func_syscall) {
    func_syscall = Function::Create(
        /*Type=*/FuncTy_8,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"syscall", mod); // (external, no body)
    func_syscall->setCallingConv(CallingConv::C);
  }
  AttributeSet func_syscall_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_syscall_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_syscall->setAttributes(func_syscall_PAL);

  Function* func_clock_gettime = mod->getFunction("clock_gettime");
  if (!func_clock_gettime) {
    func_clock_gettime = Function::Create(
        /*Type=*/FuncTy_16,
        /*Linkage=*/GlobalValue::ExternalLinkage,
        /*Name=*/"clock_gettime", mod); // (external, no body)
    func_clock_gettime->setCallingConv(CallingConv::C);
  }
  AttributeSet func_clock_gettime_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_clock_gettime_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_clock_gettime->setAttributes(func_clock_gettime_PAL);

  // Global Variable Declarations

  // Constant Definitions
  ConstantInt* const_int32_20 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
  ConstantInt* const_int64_21 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("186"), 10));
  ConstantInt* const_int64_22 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1023"), 10));
  ConstantInt* const_int64_23 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-1"), 10));
  ConstantInt* const_int32_24 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
  ConstantInt* const_int64_25 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
  ConstantInt* const_int64_26 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("329"), 10));

  // Global Variable Definitions

  Function* func_pp_begin = mod->getFunction("pp_begin");
  if (!func_pp_begin) {
    func_pp_begin = Function::Create(
        /*Type=*/FuncTy_0,
        /*Linkage=*/GlobalValue::InternalLinkage,
        /*Name=*/"pp_begin", mod); 
    func_pp_begin->setCallingConv(CallingConv::C);
  }
  AttributeSet func_pp_begin_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      B.addAttribute(Attribute::UWTable);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    func_pp_begin_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  func_pp_begin->setAttributes(func_pp_begin_PAL);
  Function::arg_iterator args = func_pp_begin->arg_begin();
  Value* ptr_user_d = args++;
  ptr_user_d->setName("user_d");
  Value* int32_pp_no = args++;
  int32_pp_no->setName("pp_no");

  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_pp_begin,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_pp_begin,0);
  BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func_pp_begin,0);
  BasicBlock* label_if_then6 = BasicBlock::Create(mod->getContext(), "if.then6",func_pp_begin,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_pp_begin,0);
  BasicBlock* label_if_end12 = BasicBlock::Create(mod->getContext(), "if.end12",func_pp_begin,0);
  BasicBlock* label_if_then19 = BasicBlock::Create(mod->getContext(), "if.then19",func_pp_begin,0);
  BasicBlock* label_if_end25 = BasicBlock::Create(mod->getContext(), "if.end25",func_pp_begin,0);
  BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_pp_begin,0);

  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 64), "retval", label_entry);
  ptr_retval->setAlignment(8);
  AllocaInst* ptr_user_d_addr = new AllocaInst(PointerTy_1, "user_d.addr", label_entry);
  ptr_user_d_addr->setAlignment(8);
  AllocaInst* ptr_pp_no_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "pp_no.addr", label_entry);
  ptr_pp_no_addr->setAlignment(4);
  AllocaInst* ptr_tid = new AllocaInst(IntegerType::get(mod->getContext(), 32), "tid", label_entry);
  ptr_tid->setAlignment(4);
  AllocaInst* ptr_pp_id = new AllocaInst(IntegerType::get(mod->getContext(), 64), "pp_id", label_entry);
  ptr_pp_id->setAlignment(8);
  AllocaInst* ptr_spec = new AllocaInst(PointerTy_6, "spec", label_entry);
  ptr_spec->setAlignment(8);
  StoreInst* void_27 = new StoreInst(ptr_user_d, ptr_user_d_addr, false, label_entry);
  void_27->setAlignment(8);
  StoreInst* void_28 = new StoreInst(int32_pp_no, ptr_pp_no_addr, false, label_entry);
  void_28->setAlignment(4);
  CallInst* int64_call = CallInst::Create(func_syscall, const_int64_21, "call", label_entry);
  int64_call->setCallingConv(CallingConv::C);
  int64_call->setTailCall(false);
  AttributeSet int64_call_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call->setAttributes(int64_call_PAL);

  BinaryOperator* int64_and = BinaryOperator::Create(Instruction::And, int64_call, const_int64_22, "and", label_entry);
  CastInst* int32_conv = new TruncInst(int64_and, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
  StoreInst* void_29 = new StoreInst(int32_conv, ptr_tid, false, label_entry);
  void_29->setAlignment(4);
  StoreInst* void_30 = new StoreInst(const_int64_23, ptr_pp_id, false, label_entry);
  void_30->setAlignment(8);
  LoadInst* int32_31 = new LoadInst(ptr_pp_no_addr, "", false, label_entry);
  int32_31->setAlignment(4);
  CastInst* int64_idxprom = new SExtInst(int32_31, IntegerType::get(mod->getContext(), 64), "idxprom", label_entry);
  std::vector<Value*> ptr_arrayidx_indices;
  ptr_arrayidx_indices.push_back(const_int32_24);
  ptr_arrayidx_indices.push_back(int64_idxprom);
  Instruction* ptr_arrayidx = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx_indices, "arrayidx", label_entry);
  LoadInst* int64_32 = new LoadInst(ptr_arrayidx, "", false, label_entry);
  int64_32->setAlignment(8);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_EQ, int64_32, const_int64_23, "cmp");
  BranchInst::Create(label_if_then, label_if_else, int1_cmp, label_entry);

  // Block if.then (label_if_then)
  StoreInst* void_34 = new StoreInst(const_int64_23, ptr_retval, false, label_if_then);
  BranchInst::Create(label_return, label_if_then);

  // Block if.else (label_if_else)
  LoadInst* int32_36 = new LoadInst(ptr_pp_no_addr, "", false, label_if_else);
  int32_36->setAlignment(4);
  CastInst* int64_idxprom2 = new SExtInst(int32_36, IntegerType::get(mod->getContext(), 64), "idxprom2", label_if_else);
  std::vector<Value*> ptr_arrayidx3_indices;
  ptr_arrayidx3_indices.push_back(const_int32_24);
  ptr_arrayidx3_indices.push_back(int64_idxprom2);
  Instruction* ptr_arrayidx3 = GetElementPtrInst::Create(gvar_array_trust_pp_nos, ptr_arrayidx3_indices, "arrayidx3", label_if_else);
  LoadInst* int64_37 = new LoadInst(ptr_arrayidx3, "", false, label_if_else);
  int64_37->setAlignment(8);
  ICmpInst* int1_cmp4 = new ICmpInst(*label_if_else, ICmpInst::ICMP_EQ, int64_37, const_int64_25, "cmp4");
  BranchInst::Create(label_if_then6, label_if_end, int1_cmp4, label_if_else);

  // Block if.then6 (label_if_then6)
  LoadInst* int32_39 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then6);
  int32_39->setAlignment(4);
  CastInst* int64_idxprom7 = new SExtInst(int32_39, IntegerType::get(mod->getContext(), 64), "idxprom7", label_if_then6);
  LoadInst* int32_40 = new LoadInst(ptr_tid, "", false, label_if_then6);
  int32_40->setAlignment(4);
  CastInst* int64_idxprom8 = new SExtInst(int32_40, IntegerType::get(mod->getContext(), 64), "idxprom8", label_if_then6);
  std::vector<Value*> ptr_arrayidx9_indices;
  ptr_arrayidx9_indices.push_back(const_int32_24);
  ptr_arrayidx9_indices.push_back(int64_idxprom8);
  Instruction* ptr_arrayidx9 = GetElementPtrInst::Create(gvar_array_duration_check_pp_nos, ptr_arrayidx9_indices, "arrayidx9", label_if_then6);
  std::vector<Value*> ptr_arrayidx10_indices;
  ptr_arrayidx10_indices.push_back(const_int32_24);
  ptr_arrayidx10_indices.push_back(int64_idxprom7);
  Instruction* ptr_arrayidx10 = GetElementPtrInst::Create(ptr_arrayidx9, ptr_arrayidx10_indices, "arrayidx10", label_if_then6);
  StoreInst* void_41 = new StoreInst(ptr_arrayidx10, ptr_spec, false, label_if_then6);
  void_41->setAlignment(8);
  LoadInst* ptr_42 = new LoadInst(ptr_spec, "", false, label_if_then6);
  ptr_42->setAlignment(8);
  std::vector<Value*> int32_call11_params;
  int32_call11_params.push_back(const_int32_24);
  int32_call11_params.push_back(ptr_42);
  CallInst* int32_call11 = CallInst::Create(func_clock_gettime, int32_call11_params, "call11", label_if_then6);
  int32_call11->setCallingConv(CallingConv::C);
  int32_call11->setTailCall(false);
  AttributeSet int32_call11_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int32_call11_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int32_call11->setAttributes(int32_call11_PAL);

  BranchInst::Create(label_if_end, label_if_then6);

  // Block if.end (label_if_end)
  BranchInst::Create(label_if_end12, label_if_end);

  // Block if.end12 (label_if_end12)
  LoadInst* int32_45 = new LoadInst(ptr_pp_no_addr, "", false, label_if_end12);
  int32_45->setAlignment(4);
  CastInst* int64_idxprom13 = new SExtInst(int32_45, IntegerType::get(mod->getContext(), 64), "idxprom13", label_if_end12);
  LoadInst* int32_46 = new LoadInst(ptr_tid, "", false, label_if_end12);
  int32_46->setAlignment(4);
  CastInst* int64_idxprom14 = new SExtInst(int32_46, IntegerType::get(mod->getContext(), 64), "idxprom14", label_if_end12);
  std::vector<Value*> ptr_arrayidx15_indices;
  ptr_arrayidx15_indices.push_back(const_int32_24);
  ptr_arrayidx15_indices.push_back(int64_idxprom14);
  Instruction* ptr_arrayidx15 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx15_indices, "arrayidx15", label_if_end12);
  std::vector<Value*> ptr_arrayidx16_indices;
  ptr_arrayidx16_indices.push_back(const_int32_24);
  ptr_arrayidx16_indices.push_back(int64_idxprom13);
  Instruction* ptr_arrayidx16 = GetElementPtrInst::Create(ptr_arrayidx15, ptr_arrayidx16_indices, "arrayidx16", label_if_end12);
  LoadInst* int64_47 = new LoadInst(ptr_arrayidx16, "", false, label_if_end12);
  int64_47->setAlignment(8);
  ICmpInst* int1_cmp17 = new ICmpInst(*label_if_end12, ICmpInst::ICMP_EQ, int64_47, const_int64_25, "cmp17");
  BranchInst::Create(label_if_then19, label_if_end25, int1_cmp17, label_if_end12);

  // Block if.then19 (label_if_then19)
  LoadInst* ptr_49 = new LoadInst(ptr_user_d_addr, "", false, label_if_then19);
  ptr_49->setAlignment(8);
  CastInst* ptr_50 = new BitCastInst(ptr_49, PointerTy_19, "", label_if_then19);
  std::vector<Value*> int64_call20_params;
  int64_call20_params.push_back(const_int64_26);
  int64_call20_params.push_back(ptr_50);
  CallInst* int64_call20 = CallInst::Create(func_syscall, int64_call20_params, "call20", label_if_then19);
  int64_call20->setCallingConv(CallingConv::C);
  int64_call20->setTailCall(false);
  AttributeSet int64_call20_PAL;
  {
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
      AttrBuilder B;
      B.addAttribute(Attribute::NoUnwind);
      PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }

    Attrs.push_back(PAS);
    int64_call20_PAL = AttributeSet::get(mod->getContext(), Attrs);

  }
  int64_call20->setAttributes(int64_call20_PAL);

  StoreInst* void_51 = new StoreInst(int64_call20, ptr_pp_id, false, label_if_then19);
  void_51->setAlignment(8);
  LoadInst* int64_52 = new LoadInst(ptr_pp_id, "", false, label_if_then19);
  int64_52->setAlignment(8);
  LoadInst* int32_53 = new LoadInst(ptr_pp_no_addr, "", false, label_if_then19);
  int32_53->setAlignment(4);
  CastInst* int64_idxprom21 = new SExtInst(int32_53, IntegerType::get(mod->getContext(), 64), "idxprom21", label_if_then19);
  LoadInst* int32_54 = new LoadInst(ptr_tid, "", false, label_if_then19);
  int32_54->setAlignment(4);
  CastInst* int64_idxprom22 = new SExtInst(int32_54, IntegerType::get(mod->getContext(), 64), "idxprom22", label_if_then19);
  std::vector<Value*> ptr_arrayidx23_indices;
  ptr_arrayidx23_indices.push_back(const_int32_24);
  ptr_arrayidx23_indices.push_back(int64_idxprom22);
  Instruction* ptr_arrayidx23 = GetElementPtrInst::Create(gvar_array_active_pps, ptr_arrayidx23_indices, "arrayidx23", label_if_then19);
  std::vector<Value*> ptr_arrayidx24_indices;
  ptr_arrayidx24_indices.push_back(const_int32_24);
  ptr_arrayidx24_indices.push_back(int64_idxprom21);
  Instruction* ptr_arrayidx24 = GetElementPtrInst::Create(ptr_arrayidx23, ptr_arrayidx24_indices, "arrayidx24", label_if_then19);
  StoreInst* void_55 = new StoreInst(int64_52, ptr_arrayidx24, false, label_if_then19);
  void_55->setAlignment(8);
  BranchInst::Create(label_if_end25, label_if_then19);

  // Block if.end25 (label_if_end25)
  LoadInst* int64_57 = new LoadInst(ptr_pp_id, "", false, label_if_end25);
  int64_57->setAlignment(8);
  StoreInst* void_58 = new StoreInst(int64_57, ptr_retval, false, label_if_end25);
  BranchInst::Create(label_return, label_if_end25);

  // Block return (label_return)
  LoadInst* int64_60 = new LoadInst(ptr_retval, "", false, label_return);
  ReturnInst::Create(mod->getContext(), int64_60, label_return);
  return func_pp_begin;
}
